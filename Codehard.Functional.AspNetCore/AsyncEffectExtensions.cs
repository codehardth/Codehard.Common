// <auto-generated/>
namespace Codehard.Functional.AspNetCore;

public static class AsyncEffectExtensions
{
    public static Aff<A> MapFailToOK<A>(this Aff<A> ma, string errorMessage = "")
        => ma.CustomError((int)HttpStatusCode.OK, errorMessage);

    public static Aff<A> MapFailToOK<A>(this Aff<A> ma, Func<Error, string> messageFunc)
        => ma.CustomError((int)HttpStatusCode.OK, messageFunc);

    public static Aff<A> MapFailToCreated<A>(this Aff<A> ma, string errorMessage = "")
        => ma.CustomError((int)HttpStatusCode.Created, errorMessage);

    public static Aff<A> MapFailToCreated<A>(this Aff<A> ma, Func<Error, string> messageFunc)
        => ma.CustomError((int)HttpStatusCode.Created, messageFunc);

    public static Aff<A> MapFailToAccepted<A>(this Aff<A> ma, string errorMessage = "")
        => ma.CustomError((int)HttpStatusCode.Accepted, errorMessage);

    public static Aff<A> MapFailToAccepted<A>(this Aff<A> ma, Func<Error, string> messageFunc)
        => ma.CustomError((int)HttpStatusCode.Accepted, messageFunc);

    public static Aff<A> MapFailToNoContent<A>(this Aff<A> ma, string errorMessage = "")
        => ma.CustomError((int)HttpStatusCode.NoContent, errorMessage);

    public static Aff<A> MapFailToNoContent<A>(this Aff<A> ma, Func<Error, string> messageFunc)
        => ma.CustomError((int)HttpStatusCode.NoContent, messageFunc);

    public static Aff<A> MapFailToBadRequest<A>(this Aff<A> ma, string errorMessage = "")
        => ma.CustomError((int)HttpStatusCode.BadRequest, errorMessage);

    public static Aff<A> MapFailToBadRequest<A>(this Aff<A> ma, Func<Error, string> messageFunc)
        => ma.CustomError((int)HttpStatusCode.BadRequest, messageFunc);

    public static Aff<A> MapFailToUnauthorized<A>(this Aff<A> ma, string errorMessage = "")
        => ma.CustomError((int)HttpStatusCode.Unauthorized, errorMessage);

    public static Aff<A> MapFailToUnauthorized<A>(this Aff<A> ma, Func<Error, string> messageFunc)
        => ma.CustomError((int)HttpStatusCode.Unauthorized, messageFunc);

    public static Aff<A> MapFailToForbidden<A>(this Aff<A> ma, string errorMessage = "")
        => ma.CustomError((int)HttpStatusCode.Forbidden, errorMessage);

    public static Aff<A> MapFailToForbidden<A>(this Aff<A> ma, Func<Error, string> messageFunc)
        => ma.CustomError((int)HttpStatusCode.Forbidden, messageFunc);

    public static Aff<A> MapFailToNotFound<A>(this Aff<A> ma, string errorMessage = "")
        => ma.CustomError((int)HttpStatusCode.NotFound, errorMessage);

    public static Aff<A> MapFailToNotFound<A>(this Aff<A> ma, Func<Error, string> messageFunc)
        => ma.CustomError((int)HttpStatusCode.NotFound, messageFunc);

    public static Aff<A> MapFailToConflict<A>(this Aff<A> ma, string errorMessage = "")
        => ma.CustomError((int)HttpStatusCode.Conflict, errorMessage);

    public static Aff<A> MapFailToConflict<A>(this Aff<A> ma, Func<Error, string> messageFunc)
        => ma.CustomError((int)HttpStatusCode.Conflict, messageFunc);

    public static Aff<A> MapFailToUnprocessableEntity<A>(this Aff<A> ma, string errorMessage = "")
        => ma.CustomError((int)HttpStatusCode.UnprocessableEntity, errorMessage);

    public static Aff<A> MapFailToUnprocessableEntity<A>(this Aff<A> ma, Func<Error, string> messageFunc)
        => ma.CustomError((int)HttpStatusCode.UnprocessableEntity, messageFunc);

    public static Aff<A> MapFailToLocked<A>(this Aff<A> ma, string errorMessage = "")
        => ma.CustomError((int)HttpStatusCode.Locked, errorMessage);

    public static Aff<A> MapFailToLocked<A>(this Aff<A> ma, Func<Error, string> messageFunc)
        => ma.CustomError((int)HttpStatusCode.Locked, messageFunc);

    public static Aff<A> MapFailToInternalServerError<A>(this Aff<A> ma, string errorMessage = "")
        => ma.CustomError((int)HttpStatusCode.InternalServerError, errorMessage);

    public static Aff<A> MapFailToInternalServerError<A>(this Aff<A> ma, Func<Error, string> messageFunc)
        => ma.CustomError((int)HttpStatusCode.InternalServerError, messageFunc);
    
    public static Aff<A> GuardWithHttpStatus<A>(
        this Aff<A> ma, Func<A, bool> predicate, HttpStatusCode httpStatusCode, string message = "")
        => ma.Bind(a =>
                predicate(a)
                    ? SuccessAff(a)
                    : FailAff<A>(Error.New((int)httpStatusCode, message)));

    public static Aff<A> GuardWithOK<A>(this Aff<A> ma, Func<A, bool> predicate, string message = "")
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.OK, message);

    public static Aff<A> GuardWithCreated<A>(this Aff<A> ma, Func<A, bool> predicate, string message = "")
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.Created, message);

    public static Aff<A> GuardWithAccepted<A>(this Aff<A> ma, Func<A, bool> predicate, string message = "")
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.Accepted, message);

    public static Aff<A> GuardWithNoContent<A>(this Aff<A> ma, Func<A, bool> predicate, string message = "")
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.NoContent, message);

    public static Aff<A> GuardWithBadRequest<A>(this Aff<A> ma, Func<A, bool> predicate, string message = "")
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.BadRequest, message);

    public static Aff<A> GuardWithUnauthorized<A>(this Aff<A> ma, Func<A, bool> predicate, string message = "")
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.Unauthorized, message);

    public static Aff<A> GuardWithForbidden<A>(this Aff<A> ma, Func<A, bool> predicate, string message = "")
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.Forbidden, message);

    public static Aff<A> GuardWithNotFound<A>(this Aff<A> ma, Func<A, bool> predicate, string message = "")
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.NotFound, message);

    public static Aff<A> GuardWithConflict<A>(this Aff<A> ma, Func<A, bool> predicate, string message = "")
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.Conflict, message);

    public static Aff<A> GuardWithUnprocessableEntity<A>(this Aff<A> ma, Func<A, bool> predicate, string message = "")
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.UnprocessableEntity, message);

    public static Aff<A> GuardWithLocked<A>(this Aff<A> ma, Func<A, bool> predicate, string message = "")
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.Locked, message);

    public static Aff<A> GuardWithInternalServerError<A>(this Aff<A> ma, Func<A, bool> predicate, string message = "")
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.InternalServerError, message);

    #region Aff<Option<A>>

    public static Aff<A> MapNoneToOK<A>(this Aff<Option<A>> ma, string message = "")
        => ma.Bind(opt => opt.ToAff().MapFailToOK(message));

    public static Aff<A> MapNoneToOK<A>(this Aff<Option<A>> ma, Func<Error, string> errorMessageFunc)
        => ma.Bind(opt => opt.ToAff().MapFailToOK(errorMessageFunc));


    public static Aff<A> MapNoneToCreated<A>(this Aff<Option<A>> ma, string message = "")
        => ma.Bind(opt => opt.ToAff().MapFailToCreated(message));

    public static Aff<A> MapNoneToCreated<A>(this Aff<Option<A>> ma, Func<Error, string> errorMessageFunc)
        => ma.Bind(opt => opt.ToAff().MapFailToCreated(errorMessageFunc));


    public static Aff<A> MapNoneToAccepted<A>(this Aff<Option<A>> ma, string message = "")
        => ma.Bind(opt => opt.ToAff().MapFailToAccepted(message));

    public static Aff<A> MapNoneToAccepted<A>(this Aff<Option<A>> ma, Func<Error, string> errorMessageFunc)
        => ma.Bind(opt => opt.ToAff().MapFailToAccepted(errorMessageFunc));


    public static Aff<A> MapNoneToNoContent<A>(this Aff<Option<A>> ma, string message = "")
        => ma.Bind(opt => opt.ToAff().MapFailToNoContent(message));

    public static Aff<A> MapNoneToNoContent<A>(this Aff<Option<A>> ma, Func<Error, string> errorMessageFunc)
        => ma.Bind(opt => opt.ToAff().MapFailToNoContent(errorMessageFunc));


    public static Aff<A> MapNoneToBadRequest<A>(this Aff<Option<A>> ma, string message = "")
        => ma.Bind(opt => opt.ToAff().MapFailToBadRequest(message));

    public static Aff<A> MapNoneToBadRequest<A>(this Aff<Option<A>> ma, Func<Error, string> errorMessageFunc)
        => ma.Bind(opt => opt.ToAff().MapFailToBadRequest(errorMessageFunc));


    public static Aff<A> MapNoneToUnauthorized<A>(this Aff<Option<A>> ma, string message = "")
        => ma.Bind(opt => opt.ToAff().MapFailToUnauthorized(message));

    public static Aff<A> MapNoneToUnauthorized<A>(this Aff<Option<A>> ma, Func<Error, string> errorMessageFunc)
        => ma.Bind(opt => opt.ToAff().MapFailToUnauthorized(errorMessageFunc));


    public static Aff<A> MapNoneToForbidden<A>(this Aff<Option<A>> ma, string message = "")
        => ma.Bind(opt => opt.ToAff().MapFailToForbidden(message));

    public static Aff<A> MapNoneToForbidden<A>(this Aff<Option<A>> ma, Func<Error, string> errorMessageFunc)
        => ma.Bind(opt => opt.ToAff().MapFailToForbidden(errorMessageFunc));


    public static Aff<A> MapNoneToNotFound<A>(this Aff<Option<A>> ma, string message = "")
        => ma.Bind(opt => opt.ToAff().MapFailToNotFound(message));

    public static Aff<A> MapNoneToNotFound<A>(this Aff<Option<A>> ma, Func<Error, string> errorMessageFunc)
        => ma.Bind(opt => opt.ToAff().MapFailToNotFound(errorMessageFunc));


    public static Aff<A> MapNoneToConflict<A>(this Aff<Option<A>> ma, string message = "")
        => ma.Bind(opt => opt.ToAff().MapFailToConflict(message));

    public static Aff<A> MapNoneToConflict<A>(this Aff<Option<A>> ma, Func<Error, string> errorMessageFunc)
        => ma.Bind(opt => opt.ToAff().MapFailToConflict(errorMessageFunc));


    public static Aff<A> MapNoneToUnprocessableEntity<A>(this Aff<Option<A>> ma, string message = "")
        => ma.Bind(opt => opt.ToAff().MapFailToUnprocessableEntity(message));

    public static Aff<A> MapNoneToUnprocessableEntity<A>(this Aff<Option<A>> ma, Func<Error, string> errorMessageFunc)
        => ma.Bind(opt => opt.ToAff().MapFailToUnprocessableEntity(errorMessageFunc));


    public static Aff<A> MapNoneToLocked<A>(this Aff<Option<A>> ma, string message = "")
        => ma.Bind(opt => opt.ToAff().MapFailToLocked(message));

    public static Aff<A> MapNoneToLocked<A>(this Aff<Option<A>> ma, Func<Error, string> errorMessageFunc)
        => ma.Bind(opt => opt.ToAff().MapFailToLocked(errorMessageFunc));


    public static Aff<A> MapNoneToInternalServerError<A>(this Aff<Option<A>> ma, string message = "")
        => ma.Bind(opt => opt.ToAff().MapFailToInternalServerError(message));

    public static Aff<A> MapNoneToInternalServerError<A>(this Aff<Option<A>> ma, Func<Error, string> errorMessageFunc)
        => ma.Bind(opt => opt.ToAff().MapFailToInternalServerError(errorMessageFunc));

    #endregion
}