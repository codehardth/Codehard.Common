// <auto-generated/>
namespace Codehard.Functional.AspNetCore;

public static class EffectExtensions
{
    #region Task<A>

    public static Aff<A> ToAffWithFailToOK<A>(this Task<A> ma)
        => ma.ToAff().MapFailToOK();

    public static Aff<A> ToAffWithFailToOK<A>(this Task<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToOK(errorMessageFunc);


    public static Aff<A> ToAffWithFailToCreated<A>(this Task<A> ma)
        => ma.ToAff().MapFailToCreated();

    public static Aff<A> ToAffWithFailToCreated<A>(this Task<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToCreated(errorMessageFunc);


    public static Aff<A> ToAffWithFailToAccepted<A>(this Task<A> ma)
        => ma.ToAff().MapFailToAccepted();

    public static Aff<A> ToAffWithFailToAccepted<A>(this Task<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToAccepted(errorMessageFunc);


    public static Aff<A> ToAffWithFailToNoContent<A>(this Task<A> ma)
        => ma.ToAff().MapFailToNoContent();

    public static Aff<A> ToAffWithFailToNoContent<A>(this Task<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToNoContent(errorMessageFunc);


    public static Aff<A> ToAffWithFailToBadRequest<A>(this Task<A> ma)
        => ma.ToAff().MapFailToBadRequest();

    public static Aff<A> ToAffWithFailToBadRequest<A>(this Task<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToBadRequest(errorMessageFunc);


    public static Aff<A> ToAffWithFailToUnauthorized<A>(this Task<A> ma)
        => ma.ToAff().MapFailToUnauthorized();

    public static Aff<A> ToAffWithFailToUnauthorized<A>(this Task<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToUnauthorized(errorMessageFunc);


    public static Aff<A> ToAffWithFailToForbidden<A>(this Task<A> ma)
        => ma.ToAff().MapFailToForbidden();

    public static Aff<A> ToAffWithFailToForbidden<A>(this Task<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToForbidden(errorMessageFunc);


    public static Aff<A> ToAffWithFailToNotFound<A>(this Task<A> ma)
        => ma.ToAff().MapFailToNotFound();

    public static Aff<A> ToAffWithFailToNotFound<A>(this Task<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToNotFound(errorMessageFunc);


    public static Aff<A> ToAffWithFailToConflict<A>(this Task<A> ma)
        => ma.ToAff().MapFailToConflict();

    public static Aff<A> ToAffWithFailToConflict<A>(this Task<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToConflict(errorMessageFunc);


    public static Aff<A> ToAffWithFailToUnprocessableEntity<A>(this Task<A> ma)
        => ma.ToAff().MapFailToUnprocessableEntity();

    public static Aff<A> ToAffWithFailToUnprocessableEntity<A>(this Task<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToUnprocessableEntity(errorMessageFunc);


    public static Aff<A> ToAffWithFailToLocked<A>(this Task<A> ma)
        => ma.ToAff().MapFailToLocked();

    public static Aff<A> ToAffWithFailToLocked<A>(this Task<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToLocked(errorMessageFunc);


    public static Aff<A> ToAffWithFailToInternalServerError<A>(this Task<A> ma)
        => ma.ToAff().MapFailToInternalServerError();

    public static Aff<A> ToAffWithFailToInternalServerError<A>(this Task<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToInternalServerError(errorMessageFunc);

    #endregion

    #region Aff<A>

    public static Aff<A> MapNoneToOK<A>(this Aff<Option<A>> ma)
        => ma.Bind(opt => opt.ToAff()).MapFailToOK();

    public static Aff<A> MapNoneToOK<A>(this Aff<Option<A>> ma, Func<Error, string> errorMessageFunc)
        => ma.Bind(opt => opt.ToAff()).MapFailToOK(errorMessageFunc);


    public static Aff<A> MapNoneToCreated<A>(this Aff<Option<A>> ma)
        => ma.Bind(opt => opt.ToAff()).MapFailToCreated();

    public static Aff<A> MapNoneToCreated<A>(this Aff<Option<A>> ma, Func<Error, string> errorMessageFunc)
        => ma.Bind(opt => opt.ToAff()).MapFailToCreated(errorMessageFunc);


    public static Aff<A> MapNoneToAccepted<A>(this Aff<Option<A>> ma)
        => ma.Bind(opt => opt.ToAff()).MapFailToAccepted();

    public static Aff<A> MapNoneToAccepted<A>(this Aff<Option<A>> ma, Func<Error, string> errorMessageFunc)
        => ma.Bind(opt => opt.ToAff()).MapFailToAccepted(errorMessageFunc);


    public static Aff<A> MapNoneToNoContent<A>(this Aff<Option<A>> ma)
        => ma.Bind(opt => opt.ToAff()).MapFailToNoContent();

    public static Aff<A> MapNoneToNoContent<A>(this Aff<Option<A>> ma, Func<Error, string> errorMessageFunc)
        => ma.Bind(opt => opt.ToAff()).MapFailToNoContent(errorMessageFunc);


    public static Aff<A> MapNoneToBadRequest<A>(this Aff<Option<A>> ma)
        => ma.Bind(opt => opt.ToAff()).MapFailToBadRequest();

    public static Aff<A> MapNoneToBadRequest<A>(this Aff<Option<A>> ma, Func<Error, string> errorMessageFunc)
        => ma.Bind(opt => opt.ToAff()).MapFailToBadRequest(errorMessageFunc);


    public static Aff<A> MapNoneToUnauthorized<A>(this Aff<Option<A>> ma)
        => ma.Bind(opt => opt.ToAff()).MapFailToUnauthorized();

    public static Aff<A> MapNoneToUnauthorized<A>(this Aff<Option<A>> ma, Func<Error, string> errorMessageFunc)
        => ma.Bind(opt => opt.ToAff()).MapFailToUnauthorized(errorMessageFunc);


    public static Aff<A> MapNoneToForbidden<A>(this Aff<Option<A>> ma)
        => ma.Bind(opt => opt.ToAff()).MapFailToForbidden();

    public static Aff<A> MapNoneToForbidden<A>(this Aff<Option<A>> ma, Func<Error, string> errorMessageFunc)
        => ma.Bind(opt => opt.ToAff()).MapFailToForbidden(errorMessageFunc);


    public static Aff<A> MapNoneToNotFound<A>(this Aff<Option<A>> ma)
        => ma.Bind(opt => opt.ToAff()).MapFailToNotFound();

    public static Aff<A> MapNoneToNotFound<A>(this Aff<Option<A>> ma, Func<Error, string> errorMessageFunc)
        => ma.Bind(opt => opt.ToAff()).MapFailToNotFound(errorMessageFunc);


    public static Aff<A> MapNoneToConflict<A>(this Aff<Option<A>> ma)
        => ma.Bind(opt => opt.ToAff()).MapFailToConflict();

    public static Aff<A> MapNoneToConflict<A>(this Aff<Option<A>> ma, Func<Error, string> errorMessageFunc)
        => ma.Bind(opt => opt.ToAff()).MapFailToConflict(errorMessageFunc);


    public static Aff<A> MapNoneToUnprocessableEntity<A>(this Aff<Option<A>> ma)
        => ma.Bind(opt => opt.ToAff()).MapFailToUnprocessableEntity();

    public static Aff<A> MapNoneToUnprocessableEntity<A>(this Aff<Option<A>> ma, Func<Error, string> errorMessageFunc)
        => ma.Bind(opt => opt.ToAff()).MapFailToUnprocessableEntity(errorMessageFunc);


    public static Aff<A> MapNoneToLocked<A>(this Aff<Option<A>> ma)
        => ma.Bind(opt => opt.ToAff()).MapFailToLocked();

    public static Aff<A> MapNoneToLocked<A>(this Aff<Option<A>> ma, Func<Error, string> errorMessageFunc)
        => ma.Bind(opt => opt.ToAff()).MapFailToLocked(errorMessageFunc);


    public static Aff<A> MapNoneToInternalServerError<A>(this Aff<Option<A>> ma)
        => ma.Bind(opt => opt.ToAff()).MapFailToInternalServerError();

    public static Aff<A> MapNoneToInternalServerError<A>(this Aff<Option<A>> ma, Func<Error, string> errorMessageFunc)
        => ma.Bind(opt => opt.ToAff()).MapFailToInternalServerError(errorMessageFunc);

    #endregion

    #region ValueTask<A>

    public static Aff<A> ToAffWithFailToOK<A>(this ValueTask<A> ma)
        => ma.ToAff().MapFailToOK();

    public static Aff<A> ToAffWithFailToOK<A>(this ValueTask<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToOK(errorMessageFunc);


    public static Aff<A> ToAffWithFailToCreated<A>(this ValueTask<A> ma)
        => ma.ToAff().MapFailToCreated();

    public static Aff<A> ToAffWithFailToCreated<A>(this ValueTask<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToCreated(errorMessageFunc);


    public static Aff<A> ToAffWithFailToAccepted<A>(this ValueTask<A> ma)
        => ma.ToAff().MapFailToAccepted();

    public static Aff<A> ToAffWithFailToAccepted<A>(this ValueTask<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToAccepted(errorMessageFunc);


    public static Aff<A> ToAffWithFailToNoContent<A>(this ValueTask<A> ma)
        => ma.ToAff().MapFailToNoContent();

    public static Aff<A> ToAffWithFailToNoContent<A>(this ValueTask<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToNoContent(errorMessageFunc);


    public static Aff<A> ToAffWithFailToBadRequest<A>(this ValueTask<A> ma)
        => ma.ToAff().MapFailToBadRequest();

    public static Aff<A> ToAffWithFailToBadRequest<A>(this ValueTask<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToBadRequest(errorMessageFunc);


    public static Aff<A> ToAffWithFailToUnauthorized<A>(this ValueTask<A> ma)
        => ma.ToAff().MapFailToUnauthorized();

    public static Aff<A> ToAffWithFailToUnauthorized<A>(this ValueTask<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToUnauthorized(errorMessageFunc);


    public static Aff<A> ToAffWithFailToForbidden<A>(this ValueTask<A> ma)
        => ma.ToAff().MapFailToForbidden();

    public static Aff<A> ToAffWithFailToForbidden<A>(this ValueTask<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToForbidden(errorMessageFunc);


    public static Aff<A> ToAffWithFailToNotFound<A>(this ValueTask<A> ma)
        => ma.ToAff().MapFailToNotFound();

    public static Aff<A> ToAffWithFailToNotFound<A>(this ValueTask<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToNotFound(errorMessageFunc);


    public static Aff<A> ToAffWithFailToConflict<A>(this ValueTask<A> ma)
        => ma.ToAff().MapFailToConflict();

    public static Aff<A> ToAffWithFailToConflict<A>(this ValueTask<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToConflict(errorMessageFunc);


    public static Aff<A> ToAffWithFailToUnprocessableEntity<A>(this ValueTask<A> ma)
        => ma.ToAff().MapFailToUnprocessableEntity();

    public static Aff<A> ToAffWithFailToUnprocessableEntity<A>(this ValueTask<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToUnprocessableEntity(errorMessageFunc);


    public static Aff<A> ToAffWithFailToLocked<A>(this ValueTask<A> ma)
        => ma.ToAff().MapFailToLocked();

    public static Aff<A> ToAffWithFailToLocked<A>(this ValueTask<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToLocked(errorMessageFunc);


    public static Aff<A> ToAffWithFailToInternalServerError<A>(this ValueTask<A> ma)
        => ma.ToAff().MapFailToInternalServerError();

    public static Aff<A> ToAffWithFailToInternalServerError<A>(this ValueTask<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToInternalServerError(errorMessageFunc);

    #endregion

    #region Option<A>

    public static Aff<A> ToAffWithFailToOK<A>(this Option<A> ma)
        => ma.ToAff().MapFailToOK();

    public static Aff<A> ToAffWithFailToOK<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToOK(errorMessageFunc);


    public static Aff<A> ToAffWithFailToCreated<A>(this Option<A> ma)
        => ma.ToAff().MapFailToCreated();

    public static Aff<A> ToAffWithFailToCreated<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToCreated(errorMessageFunc);


    public static Aff<A> ToAffWithFailToAccepted<A>(this Option<A> ma)
        => ma.ToAff().MapFailToAccepted();

    public static Aff<A> ToAffWithFailToAccepted<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToAccepted(errorMessageFunc);


    public static Aff<A> ToAffWithFailToNoContent<A>(this Option<A> ma)
        => ma.ToAff().MapFailToNoContent();

    public static Aff<A> ToAffWithFailToNoContent<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToNoContent(errorMessageFunc);


    public static Aff<A> ToAffWithFailToBadRequest<A>(this Option<A> ma)
        => ma.ToAff().MapFailToBadRequest();

    public static Aff<A> ToAffWithFailToBadRequest<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToBadRequest(errorMessageFunc);


    public static Aff<A> ToAffWithFailToUnauthorized<A>(this Option<A> ma)
        => ma.ToAff().MapFailToUnauthorized();

    public static Aff<A> ToAffWithFailToUnauthorized<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToUnauthorized(errorMessageFunc);


    public static Aff<A> ToAffWithFailToForbidden<A>(this Option<A> ma)
        => ma.ToAff().MapFailToForbidden();

    public static Aff<A> ToAffWithFailToForbidden<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToForbidden(errorMessageFunc);


    public static Aff<A> ToAffWithFailToNotFound<A>(this Option<A> ma)
        => ma.ToAff().MapFailToNotFound();

    public static Aff<A> ToAffWithFailToNotFound<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToNotFound(errorMessageFunc);


    public static Aff<A> ToAffWithFailToConflict<A>(this Option<A> ma)
        => ma.ToAff().MapFailToConflict();

    public static Aff<A> ToAffWithFailToConflict<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToConflict(errorMessageFunc);


    public static Aff<A> ToAffWithFailToUnprocessableEntity<A>(this Option<A> ma)
        => ma.ToAff().MapFailToUnprocessableEntity();

    public static Aff<A> ToAffWithFailToUnprocessableEntity<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToUnprocessableEntity(errorMessageFunc);


    public static Aff<A> ToAffWithFailToLocked<A>(this Option<A> ma)
        => ma.ToAff().MapFailToLocked();

    public static Aff<A> ToAffWithFailToLocked<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToLocked(errorMessageFunc);


    public static Aff<A> ToAffWithFailToInternalServerError<A>(this Option<A> ma)
        => ma.ToAff().MapFailToInternalServerError();

    public static Aff<A> ToAffWithFailToInternalServerError<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToInternalServerError(errorMessageFunc);

    public static Eff<A> ToEffWithFailToOK<A>(this Option<A> ma)
        => ma.ToEff().MapFailToOK();

    public static Eff<A> ToEffWithFailToOK<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToEff().MapFailToOK(errorMessageFunc);


    public static Eff<A> ToEffWithFailToCreated<A>(this Option<A> ma)
        => ma.ToEff().MapFailToCreated();

    public static Eff<A> ToEffWithFailToCreated<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToEff().MapFailToCreated(errorMessageFunc);


    public static Eff<A> ToEffWithFailToAccepted<A>(this Option<A> ma)
        => ma.ToEff().MapFailToAccepted();

    public static Eff<A> ToEffWithFailToAccepted<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToEff().MapFailToAccepted(errorMessageFunc);


    public static Eff<A> ToEffWithFailToNoContent<A>(this Option<A> ma)
        => ma.ToEff().MapFailToNoContent();

    public static Eff<A> ToEffWithFailToNoContent<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToEff().MapFailToNoContent(errorMessageFunc);


    public static Eff<A> ToEffWithFailToBadRequest<A>(this Option<A> ma)
        => ma.ToEff().MapFailToBadRequest();

    public static Eff<A> ToEffWithFailToBadRequest<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToEff().MapFailToBadRequest(errorMessageFunc);


    public static Eff<A> ToEffWithFailToUnauthorized<A>(this Option<A> ma)
        => ma.ToEff().MapFailToUnauthorized();

    public static Eff<A> ToEffWithFailToUnauthorized<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToEff().MapFailToUnauthorized(errorMessageFunc);


    public static Eff<A> ToEffWithFailToForbidden<A>(this Option<A> ma)
        => ma.ToEff().MapFailToForbidden();

    public static Eff<A> ToEffWithFailToForbidden<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToEff().MapFailToForbidden(errorMessageFunc);


    public static Eff<A> ToEffWithFailToNotFound<A>(this Option<A> ma)
        => ma.ToEff().MapFailToNotFound();

    public static Eff<A> ToEffWithFailToNotFound<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToEff().MapFailToNotFound(errorMessageFunc);


    public static Eff<A> ToEffWithFailToConflict<A>(this Option<A> ma)
        => ma.ToEff().MapFailToConflict();

    public static Eff<A> ToEffWithFailToConflict<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToEff().MapFailToConflict(errorMessageFunc);

    public static Eff<A> ToEffWithFailToUnprocessableEntity<A>(this Option<A> ma)
        => ma.ToEff().MapFailToUnprocessableEntity();

    public static Eff<A> ToEffWithFailToUnprocessableEntity<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToEff().MapFailToUnprocessableEntity(errorMessageFunc);


    public static Eff<A> ToEffWithFailToLocked<A>(this Option<A> ma)
        => ma.ToEff().MapFailToLocked();

    public static Eff<A> ToEffWithFailToLocked<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToEff().MapFailToLocked(errorMessageFunc);


    public static Eff<A> ToEffWithFailToInternalServerError<A>(this Option<A> ma)
        => ma.ToEff().MapFailToInternalServerError();

    public static Eff<A> ToEffWithFailToInternalServerError<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToEff().MapFailToInternalServerError(errorMessageFunc);

    #endregion

    #region Validation<Error, A>

    public static Aff<A> ToAffWithFailToOK<A>(this Validation<Error, A> ma, int errorCode)
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToOK();

    public static Aff<A> ToAffWithFailToOK<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToOK(errorMessageFunc);


    public static Aff<A> ToAffWithFailToCreated<A>(this Validation<Error, A> ma, int errorCode)
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToCreated();

    public static Aff<A> ToAffWithFailToCreated<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToCreated(errorMessageFunc);


    public static Aff<A> ToAffWithFailToAccepted<A>(this Validation<Error, A> ma, int errorCode)
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToAccepted();

    public static Aff<A> ToAffWithFailToAccepted<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToAccepted(errorMessageFunc);


    public static Aff<A> ToAffWithFailToNoContent<A>(this Validation<Error, A> ma, int errorCode)
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToNoContent();

    public static Aff<A> ToAffWithFailToNoContent<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToNoContent(errorMessageFunc);


    public static Aff<A> ToAffWithFailToBadRequest<A>(this Validation<Error, A> ma, int errorCode)
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToBadRequest();

    public static Aff<A> ToAffWithFailToBadRequest<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToBadRequest(errorMessageFunc);


    public static Aff<A> ToAffWithFailToUnauthorized<A>(this Validation<Error, A> ma, int errorCode)
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToUnauthorized();

    public static Aff<A> ToAffWithFailToUnauthorized<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToUnauthorized(errorMessageFunc);


    public static Aff<A> ToAffWithFailToForbidden<A>(this Validation<Error, A> ma, int errorCode)
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToForbidden();

    public static Aff<A> ToAffWithFailToForbidden<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToForbidden(errorMessageFunc);


    public static Aff<A> ToAffWithFailToNotFound<A>(this Validation<Error, A> ma, int errorCode)
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToNotFound();

    public static Aff<A> ToAffWithFailToNotFound<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToNotFound(errorMessageFunc);


    public static Aff<A> ToAffWithFailToConflict<A>(this Validation<Error, A> ma, int errorCode)
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToConflict();

    public static Aff<A> ToAffWithFailToConflict<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToConflict(errorMessageFunc);


    public static Aff<A> ToAffWithFailToUnprocessableEntity<A>(this Validation<Error, A> ma, int errorCode)
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToUnprocessableEntity();

    public static Aff<A> ToAffWithFailToUnprocessableEntity<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToUnprocessableEntity(errorMessageFunc);


    public static Aff<A> ToAffWithFailToLocked<A>(this Validation<Error, A> ma, int errorCode)
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToLocked();

    public static Aff<A> ToAffWithFailToLocked<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToLocked(errorMessageFunc);


    public static Aff<A> ToAffWithFailToInternalServerError<A>(this Validation<Error, A> ma, int errorCode)
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToInternalServerError();

    public static Aff<A> ToAffWithFailToInternalServerError<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToInternalServerError(errorMessageFunc);

    public static Eff<A> ToEffWithFailToOK<A>(this Validation<Error, A> ma, int errorCode)
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToOK();

    public static Eff<A> ToEffWithFailToOK<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToOK(errorMessageFunc);


    public static Eff<A> ToEffWithFailToCreated<A>(this Validation<Error, A> ma, int errorCode)
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToCreated();

    public static Eff<A> ToEffWithFailToCreated<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToCreated(errorMessageFunc);


    public static Eff<A> ToEffWithFailToAccepted<A>(this Validation<Error, A> ma, int errorCode)
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToAccepted();

    public static Eff<A> ToEffWithFailToAccepted<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToAccepted(errorMessageFunc);


    public static Eff<A> ToEffWithFailToNoContent<A>(this Validation<Error, A> ma, int errorCode)
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToNoContent();

    public static Eff<A> ToEffWithFailToNoContent<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToNoContent(errorMessageFunc);


    public static Eff<A> ToEffWithFailToBadRequest<A>(this Validation<Error, A> ma, int errorCode)
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToBadRequest();

    public static Eff<A> ToEffWithFailToBadRequest<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToBadRequest(errorMessageFunc);


    public static Eff<A> ToEffWithFailToUnauthorized<A>(this Validation<Error, A> ma, int errorCode)
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToUnauthorized();

    public static Eff<A> ToEffWithFailToUnauthorized<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToUnauthorized(errorMessageFunc);


    public static Eff<A> ToEffWithFailToForbidden<A>(this Validation<Error, A> ma, int errorCode)
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToForbidden();

    public static Eff<A> ToEffWithFailToForbidden<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToForbidden(errorMessageFunc);


    public static Eff<A> ToEffWithFailToNotFound<A>(this Validation<Error, A> ma, int errorCode)
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToNotFound();

    public static Eff<A> ToEffWithFailToNotFound<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToNotFound(errorMessageFunc);


    public static Eff<A> ToEffWithFailToConflict<A>(this Validation<Error, A> ma, int errorCode)
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToConflict();

    public static Eff<A> ToEffWithFailToConflict<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToConflict(errorMessageFunc);


    public static Eff<A> ToEffWithFailToUnprocessableEntity<A>(this Validation<Error, A> ma, int errorCode)
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToUnprocessableEntity();

    public static Eff<A> ToEffWithFailToUnprocessableEntity<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToUnprocessableEntity(errorMessageFunc);


    public static Eff<A> ToEffWithFailToLocked<A>(this Validation<Error, A> ma, int errorCode)
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToLocked();

    public static Eff<A> ToEffWithFailToLocked<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToLocked(errorMessageFunc);


    public static Eff<A> ToEffWithFailToInternalServerError<A>(this Validation<Error, A> ma, int errorCode)
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToInternalServerError();

    public static Eff<A> ToEffWithFailToInternalServerError<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToInternalServerError(errorMessageFunc);

    #endregion

    #region Aff-Option

    public static Aff<Option<A>> ToAffOptionWithFailToOK<A>(this Task<A> ma)
        => ma.Map(Optional).ToAff().MapFailToOK();

    public static Aff<Option<A>> ToAffOptionWithFailToOK<A>(this Task<A> ma, Func<Error, string> errorMessageFunc)
        => ma.Map(Optional).ToAff().MapFailToOK(errorMessageFunc);


    public static Aff<Option<A>> ToAffOptionWithFailToCreated<A>(this Task<A> ma)
        => ma.Map(Optional).ToAff().MapFailToCreated();

    public static Aff<Option<A>> ToAffOptionWithFailToCreated<A>(this Task<A> ma, Func<Error, string> errorMessageFunc)
        => ma.Map(Optional).ToAff().MapFailToCreated(errorMessageFunc);


    public static Aff<Option<A>> ToAffOptionWithFailToAccepted<A>(this Task<A> ma)
        => ma.Map(Optional).ToAff().MapFailToAccepted();

    public static Aff<Option<A>> ToAffOptionWithFailToAccepted<A>(this Task<A> ma, Func<Error, string> errorMessageFunc)
        => ma.Map(Optional).ToAff().MapFailToAccepted(errorMessageFunc);


    public static Aff<Option<A>> ToAffOptionWithFailToNoContent<A>(this Task<A> ma)
        => ma.Map(Optional).ToAff().MapFailToNoContent();

    public static Aff<Option<A>> ToAffOptionWithFailToNoContent<A>(this Task<A> ma, Func<Error, string> errorMessageFunc)
        => ma.Map(Optional).ToAff().MapFailToNoContent(errorMessageFunc);


    public static Aff<Option<A>> ToAffOptionWithFailToBadRequest<A>(this Task<A> ma)
        => ma.Map(Optional).ToAff().MapFailToBadRequest();

    public static Aff<Option<A>> ToAffOptionWithFailToBadRequest<A>(this Task<A> ma, Func<Error, string> errorMessageFunc)
        => ma.Map(Optional).ToAff().MapFailToBadRequest(errorMessageFunc);


    public static Aff<Option<A>> ToAffOptionWithFailToUnauthorized<A>(this Task<A> ma)
        => ma.Map(Optional).ToAff().MapFailToUnauthorized();

    public static Aff<Option<A>> ToAffOptionWithFailToUnauthorized<A>(this Task<A> ma, Func<Error, string> errorMessageFunc)
        => ma.Map(Optional).ToAff().MapFailToUnauthorized(errorMessageFunc);


    public static Aff<Option<A>> ToAffOptionWithFailToForbidden<A>(this Task<A> ma)
        => ma.Map(Optional).ToAff().MapFailToForbidden();

    public static Aff<Option<A>> ToAffOptionWithFailToForbidden<A>(this Task<A> ma, Func<Error, string> errorMessageFunc)
        => ma.Map(Optional).ToAff().MapFailToForbidden(errorMessageFunc);


    public static Aff<Option<A>> ToAffOptionWithFailToNotFound<A>(this Task<A> ma)
        => ma.Map(Optional).ToAff().MapFailToNotFound();

    public static Aff<Option<A>> ToAffOptionWithFailToNotFound<A>(this Task<A> ma, Func<Error, string> errorMessageFunc)
        => ma.Map(Optional).ToAff().MapFailToNotFound(errorMessageFunc);


    public static Aff<Option<A>> ToAffOptionWithFailToConflict<A>(this Task<A> ma)
        => ma.Map(Optional).ToAff().MapFailToConflict();

    public static Aff<Option<A>> ToAffOptionWithFailToConflict<A>(this Task<A> ma, Func<Error, string> errorMessageFunc)
        => ma.Map(Optional).ToAff().MapFailToConflict(errorMessageFunc);


    public static Aff<Option<A>> ToAffOptionWithFailToUnprocessableEntity<A>(this Task<A> ma)
        => ma.Map(Optional).ToAff().MapFailToUnprocessableEntity();

    public static Aff<Option<A>> ToAffOptionWithFailToUnprocessableEntity<A>(this Task<A> ma, Func<Error, string> errorMessageFunc)
        => ma.Map(Optional).ToAff().MapFailToUnprocessableEntity(errorMessageFunc);


    public static Aff<Option<A>> ToAffOptionWithFailToLocked<A>(this Task<A> ma)
        => ma.Map(Optional).ToAff().MapFailToLocked();

    public static Aff<Option<A>> ToAffOptionWithFailToLocked<A>(this Task<A> ma, Func<Error, string> errorMessageFunc)
        => ma.Map(Optional).ToAff().MapFailToLocked(errorMessageFunc);


    public static Aff<Option<A>> ToAffOptionWithFailToInternalServerError<A>(this Task<A> ma)
        => ma.Map(Optional).ToAff().MapFailToInternalServerError();

    public static Aff<Option<A>> ToAffOptionWithFailToInternalServerError<A>(this Task<A> ma, Func<Error, string> errorMessageFunc)
        => ma.Map(Optional).ToAff().MapFailToInternalServerError(errorMessageFunc);

    #endregion
    
    #region Aff Extensions

    public static Aff<A> MapFailToOK<A>(this Aff<A> ma)
        => ma.CustomError((int)HttpStatusCode.OK, _ => string.Empty);

    public static Aff<A> MapFailToOK<A>(this Aff<A> ma, Func<Error, string> messageFunc)
        => ma.CustomError((int)HttpStatusCode.OK, messageFunc);


    public static Aff<A> MapFailToCreated<A>(this Aff<A> ma)
        => ma.CustomError((int)HttpStatusCode.Created, _ => string.Empty);

    public static Aff<A> MapFailToCreated<A>(this Aff<A> ma, Func<Error, string> messageFunc)
        => ma.CustomError((int)HttpStatusCode.Created, messageFunc);


    public static Aff<A> MapFailToAccepted<A>(this Aff<A> ma)
        => ma.CustomError((int)HttpStatusCode.Accepted, _ => string.Empty);

    public static Aff<A> MapFailToAccepted<A>(this Aff<A> ma, Func<Error, string> messageFunc)
        => ma.CustomError((int)HttpStatusCode.Accepted, messageFunc);


    public static Aff<A> MapFailToNoContent<A>(this Aff<A> ma)
        => ma.CustomError((int)HttpStatusCode.NoContent, _ => string.Empty);

    public static Aff<A> MapFailToNoContent<A>(this Aff<A> ma, Func<Error, string> messageFunc)
        => ma.CustomError((int)HttpStatusCode.NoContent, messageFunc);


    public static Aff<A> MapFailToBadRequest<A>(this Aff<A> ma)
        => ma.CustomError((int)HttpStatusCode.BadRequest, _ => string.Empty);

    public static Aff<A> MapFailToBadRequest<A>(this Aff<A> ma, Func<Error, string> messageFunc)
        => ma.CustomError((int)HttpStatusCode.BadRequest, messageFunc);


    public static Aff<A> MapFailToUnauthorized<A>(this Aff<A> ma)
        => ma.CustomError((int)HttpStatusCode.Unauthorized, _ => string.Empty);

    public static Aff<A> MapFailToUnauthorized<A>(this Aff<A> ma, Func<Error, string> messageFunc)
        => ma.CustomError((int)HttpStatusCode.Unauthorized, messageFunc);


    public static Aff<A> MapFailToForbidden<A>(this Aff<A> ma)
        => ma.CustomError((int)HttpStatusCode.Forbidden, _ => string.Empty);

    public static Aff<A> MapFailToForbidden<A>(this Aff<A> ma, Func<Error, string> messageFunc)
        => ma.CustomError((int)HttpStatusCode.Forbidden, messageFunc);


    public static Aff<A> MapFailToNotFound<A>(this Aff<A> ma)
        => ma.CustomError((int)HttpStatusCode.NotFound, _ => string.Empty);

    public static Aff<A> MapFailToNotFound<A>(this Aff<A> ma, Func<Error, string> messageFunc)
        => ma.CustomError((int)HttpStatusCode.NotFound, messageFunc);


    public static Aff<A> MapFailToConflict<A>(this Aff<A> ma)
        => ma.CustomError((int)HttpStatusCode.Conflict, _ => string.Empty);

    public static Aff<A> MapFailToConflict<A>(this Aff<A> ma, Func<Error, string> messageFunc)
        => ma.CustomError((int)HttpStatusCode.Conflict, messageFunc);


    public static Aff<A> MapFailToUnprocessableEntity<A>(this Aff<A> ma)
        => ma.CustomError((int)HttpStatusCode.UnprocessableEntity, _ => string.Empty);

    public static Aff<A> MapFailToUnprocessableEntity<A>(this Aff<A> ma, Func<Error, string> messageFunc)
        => ma.CustomError((int)HttpStatusCode.UnprocessableEntity, messageFunc);


    public static Aff<A> MapFailToLocked<A>(this Aff<A> ma)
        => ma.CustomError((int)HttpStatusCode.Locked, _ => string.Empty);

    public static Aff<A> MapFailToLocked<A>(this Aff<A> ma, Func<Error, string> messageFunc)
        => ma.CustomError((int)HttpStatusCode.Locked, messageFunc);


    public static Aff<A> MapFailToInternalServerError<A>(this Aff<A> ma)
        => ma.CustomError((int)HttpStatusCode.InternalServerError, _ => string.Empty);

    public static Aff<A> MapFailToInternalServerError<A>(this Aff<A> ma, Func<Error, string> messageFunc)
        => ma.CustomError((int)HttpStatusCode.InternalServerError, messageFunc);

    #endregion

    #region Eff Extensions

    public static Eff<A> MapFailToOK<A>(this Eff<A> ma)
        => ma.CustomError((int)HttpStatusCode.OK, _ => string.Empty);

    public static Eff<A> MapFailToOK<A>(this Eff<A> ma, Func<Error, string> messageFunc)
        => ma.CustomError((int)HttpStatusCode.OK, messageFunc);


    public static Eff<A> MapFailToCreated<A>(this Eff<A> ma)
        => ma.CustomError((int)HttpStatusCode.Created, _ => string.Empty);

    public static Eff<A> MapFailToCreated<A>(this Eff<A> ma, Func<Error, string> messageFunc)
        => ma.CustomError((int)HttpStatusCode.Created, messageFunc);


    public static Eff<A> MapFailToAccepted<A>(this Eff<A> ma)
        => ma.CustomError((int)HttpStatusCode.Accepted, _ => string.Empty);

    public static Eff<A> MapFailToAccepted<A>(this Eff<A> ma, Func<Error, string> messageFunc)
        => ma.CustomError((int)HttpStatusCode.Accepted, messageFunc);


    public static Eff<A> MapFailToNoContent<A>(this Eff<A> ma)
        => ma.CustomError((int)HttpStatusCode.NoContent, _ => string.Empty);

    public static Eff<A> MapFailToNoContent<A>(this Eff<A> ma, Func<Error, string> messageFunc)
        => ma.CustomError((int)HttpStatusCode.NoContent, messageFunc);


    public static Eff<A> MapFailToBadRequest<A>(this Eff<A> ma)
        => ma.CustomError((int)HttpStatusCode.BadRequest, _ => string.Empty);

    public static Eff<A> MapFailToBadRequest<A>(this Eff<A> ma, Func<Error, string> messageFunc)
        => ma.CustomError((int)HttpStatusCode.BadRequest, messageFunc);


    public static Eff<A> MapFailToUnauthorized<A>(this Eff<A> ma)
        => ma.CustomError((int)HttpStatusCode.Unauthorized, _ => string.Empty);

    public static Eff<A> MapFailToUnauthorized<A>(this Eff<A> ma, Func<Error, string> messageFunc)
        => ma.CustomError((int)HttpStatusCode.Unauthorized, messageFunc);


    public static Eff<A> MapFailToForbidden<A>(this Eff<A> ma)
        => ma.CustomError((int)HttpStatusCode.Forbidden, _ => string.Empty);

    public static Eff<A> MapFailToForbidden<A>(this Eff<A> ma, Func<Error, string> messageFunc)
        => ma.CustomError((int)HttpStatusCode.Forbidden, messageFunc);


    public static Eff<A> MapFailToNotFound<A>(this Eff<A> ma)
        => ma.CustomError((int)HttpStatusCode.NotFound, _ => string.Empty);

    public static Eff<A> MapFailToNotFound<A>(this Eff<A> ma, Func<Error, string> messageFunc)
        => ma.CustomError((int)HttpStatusCode.NotFound, messageFunc);


    public static Eff<A> MapFailToConflict<A>(this Eff<A> ma)
        => ma.CustomError((int)HttpStatusCode.Conflict, _ => string.Empty);

    public static Eff<A> MapFailToConflict<A>(this Eff<A> ma, Func<Error, string> messageFunc)
        => ma.CustomError((int)HttpStatusCode.Conflict, messageFunc);


    public static Eff<A> MapFailToUnprocessableEntity<A>(this Eff<A> ma)
        => ma.CustomError((int)HttpStatusCode.UnprocessableEntity, _ => string.Empty);

    public static Eff<A> MapFailToUnprocessableEntity<A>(this Eff<A> ma, Func<Error, string> messageFunc)
        => ma.CustomError((int)HttpStatusCode.UnprocessableEntity, messageFunc);


    public static Eff<A> MapFailToLocked<A>(this Eff<A> ma)
        => ma.CustomError((int)HttpStatusCode.Locked, _ => string.Empty);

    public static Eff<A> MapFailToLocked<A>(this Eff<A> ma, Func<Error, string> messageFunc)
        => ma.CustomError((int)HttpStatusCode.Locked, messageFunc);


    public static Eff<A> MapFailToInternalServerError<A>(this Eff<A> ma)
        => ma.CustomError((int)HttpStatusCode.InternalServerError, _ => string.Empty);

    public static Eff<A> MapFailToInternalServerError<A>(this Eff<A> ma, Func<Error, string> messageFunc)
        => ma.CustomError((int)HttpStatusCode.InternalServerError, messageFunc);

    #endregion

    public static Error Flatten(this Seq<Error> errors, int errorCode, char sep = '\n')
        => Error.New(errorCode, string.Concat(sep, errors.Map(e => e.Message)));

    private static Aff<A> CustomError<A>(this Aff<A> ma, int code, Func<Error, string> messageFunc)
        => ma.MapFail(err =>
            err.Exception.Match(
                Some: ex => Error.New(code, messageFunc(err), ex),
                None: () => Error.New(code, messageFunc(err), err)));

    private static Eff<A> CustomError<A>(this Eff<A> ma, int code, Func<Error, string> messageFunc)
        => ma.MapFail(err =>
            err.Exception.Match(
                Some: ex => Error.New(code, messageFunc(err), ex),
                None: () => Error.New(code, messageFunc(err), err)));
}