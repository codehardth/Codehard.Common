// <auto-generated/>
namespace Codehard.Functional.AspNetCore;

public static class OptionExtensions
{
    public static Aff<A> MapNoneToOK<A>(this Aff<Option<A>> ma, string errorMessage = "")
        => ma.Bind(opt => opt.ToAff()).MapFailToOK(_ => errorMessage);

    public static Aff<A> MapNoneToOK<A>(this Aff<Option<A>> ma, Func<Error, string> errorMessageFunc)
        => ma.Bind(opt => opt.ToAff()).MapFailToOK(errorMessageFunc);

    public static Aff<A> MapNoneToCreated<A>(this Aff<Option<A>> ma, string errorMessage = "")
        => ma.Bind(opt => opt.ToAff()).MapFailToCreated(_ => errorMessage);

    public static Aff<A> MapNoneToCreated<A>(this Aff<Option<A>> ma, Func<Error, string> errorMessageFunc)
        => ma.Bind(opt => opt.ToAff()).MapFailToCreated(errorMessageFunc);

    public static Aff<A> MapNoneToAccepted<A>(this Aff<Option<A>> ma, string errorMessage = "")
        => ma.Bind(opt => opt.ToAff()).MapFailToAccepted(_ => errorMessage);

    public static Aff<A> MapNoneToAccepted<A>(this Aff<Option<A>> ma, Func<Error, string> errorMessageFunc)
        => ma.Bind(opt => opt.ToAff()).MapFailToAccepted(errorMessageFunc);

    public static Aff<A> MapNoneToNoContent<A>(this Aff<Option<A>> ma, string errorMessage = "")
        => ma.Bind(opt => opt.ToAff()).MapFailToNoContent(_ => errorMessage);

    public static Aff<A> MapNoneToNoContent<A>(this Aff<Option<A>> ma, Func<Error, string> errorMessageFunc)
        => ma.Bind(opt => opt.ToAff()).MapFailToNoContent(errorMessageFunc);

    public static Aff<A> MapNoneToBadRequest<A>(this Aff<Option<A>> ma, string errorMessage = "")
        => ma.Bind(opt => opt.ToAff()).MapFailToBadRequest(_ => errorMessage);

    public static Aff<A> MapNoneToBadRequest<A>(this Aff<Option<A>> ma, Func<Error, string> errorMessageFunc)
        => ma.Bind(opt => opt.ToAff()).MapFailToBadRequest(errorMessageFunc);

    public static Aff<A> MapNoneToUnauthorized<A>(this Aff<Option<A>> ma, string errorMessage = "")
        => ma.Bind(opt => opt.ToAff()).MapFailToUnauthorized(_ => errorMessage);

    public static Aff<A> MapNoneToUnauthorized<A>(this Aff<Option<A>> ma, Func<Error, string> errorMessageFunc)
        => ma.Bind(opt => opt.ToAff()).MapFailToUnauthorized(errorMessageFunc);

    public static Aff<A> MapNoneToForbidden<A>(this Aff<Option<A>> ma, string errorMessage = "")
        => ma.Bind(opt => opt.ToAff()).MapFailToForbidden(_ => errorMessage);

    public static Aff<A> MapNoneToForbidden<A>(this Aff<Option<A>> ma, Func<Error, string> errorMessageFunc)
        => ma.Bind(opt => opt.ToAff()).MapFailToForbidden(errorMessageFunc);

    public static Aff<A> MapNoneToNotFound<A>(this Aff<Option<A>> ma, string errorMessage = "")
        => ma.Bind(opt => opt.ToAff()).MapFailToNotFound(_ => errorMessage);

    public static Aff<A> MapNoneToNotFound<A>(this Aff<Option<A>> ma, Func<Error, string> errorMessageFunc)
        => ma.Bind(opt => opt.ToAff()).MapFailToNotFound(errorMessageFunc);

    public static Aff<A> MapNoneToConflict<A>(this Aff<Option<A>> ma, string errorMessage = "")
        => ma.Bind(opt => opt.ToAff()).MapFailToConflict(_ => errorMessage);

    public static Aff<A> MapNoneToConflict<A>(this Aff<Option<A>> ma, Func<Error, string> errorMessageFunc)
        => ma.Bind(opt => opt.ToAff()).MapFailToConflict(errorMessageFunc);

    public static Aff<A> MapNoneToUnprocessableEntity<A>(this Aff<Option<A>> ma, string errorMessage = "")
        => ma.Bind(opt => opt.ToAff()).MapFailToUnprocessableEntity(_ => errorMessage);

    public static Aff<A> MapNoneToUnprocessableEntity<A>(this Aff<Option<A>> ma, Func<Error, string> errorMessageFunc)
        => ma.Bind(opt => opt.ToAff()).MapFailToUnprocessableEntity(errorMessageFunc);

    public static Aff<A> MapNoneToLocked<A>(this Aff<Option<A>> ma, string errorMessage = "")
        => ma.Bind(opt => opt.ToAff()).MapFailToLocked(_ => errorMessage);

    public static Aff<A> MapNoneToLocked<A>(this Aff<Option<A>> ma, Func<Error, string> errorMessageFunc)
        => ma.Bind(opt => opt.ToAff()).MapFailToLocked(errorMessageFunc);

    public static Aff<A> MapNoneToInternalServerError<A>(this Aff<Option<A>> ma, string errorMessage = "")
        => ma.Bind(opt => opt.ToAff()).MapFailToInternalServerError(_ => errorMessage);

    public static Aff<A> MapNoneToInternalServerError<A>(this Aff<Option<A>> ma, Func<Error, string> errorMessageFunc)
        => ma.Bind(opt => opt.ToAff()).MapFailToInternalServerError(errorMessageFunc);

    public static Aff<A> ToAffWithFailToOK<A>(this Option<A> ma, string errorMessage = "")
        => ma.ToAff().MapFailToOK(_ => errorMessage);

    public static Aff<A> ToAffWithFailToOK<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToOK(errorMessageFunc);

    public static Aff<A> ToAffWithFailToCreated<A>(this Option<A> ma, string errorMessage = "")
        => ma.ToAff().MapFailToCreated(_ => errorMessage);

    public static Aff<A> ToAffWithFailToCreated<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToCreated(errorMessageFunc);

    public static Aff<A> ToAffWithFailToAccepted<A>(this Option<A> ma, string errorMessage = "")
        => ma.ToAff().MapFailToAccepted(_ => errorMessage);

    public static Aff<A> ToAffWithFailToAccepted<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToAccepted(errorMessageFunc);

    public static Aff<A> ToAffWithFailToNoContent<A>(this Option<A> ma, string errorMessage = "")
        => ma.ToAff().MapFailToNoContent(_ => errorMessage);

    public static Aff<A> ToAffWithFailToNoContent<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToNoContent(errorMessageFunc);

    public static Aff<A> ToAffWithFailToBadRequest<A>(this Option<A> ma, string errorMessage = "")
        => ma.ToAff().MapFailToBadRequest(_ => errorMessage);

    public static Aff<A> ToAffWithFailToBadRequest<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToBadRequest(errorMessageFunc);

    public static Aff<A> ToAffWithFailToUnauthorized<A>(this Option<A> ma, string errorMessage = "")
        => ma.ToAff().MapFailToUnauthorized(_ => errorMessage);

    public static Aff<A> ToAffWithFailToUnauthorized<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToUnauthorized(errorMessageFunc);

    public static Aff<A> ToAffWithFailToForbidden<A>(this Option<A> ma, string errorMessage = "")
        => ma.ToAff().MapFailToForbidden(_ => errorMessage);

    public static Aff<A> ToAffWithFailToForbidden<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToForbidden(errorMessageFunc);

    public static Aff<A> ToAffWithFailToNotFound<A>(this Option<A> ma, string errorMessage = "")
        => ma.ToAff().MapFailToNotFound(_ => errorMessage);

    public static Aff<A> ToAffWithFailToNotFound<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToNotFound(errorMessageFunc);

    public static Aff<A> ToAffWithFailToConflict<A>(this Option<A> ma, string errorMessage = "")
        => ma.ToAff().MapFailToConflict(_ => errorMessage);

    public static Aff<A> ToAffWithFailToConflict<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToConflict(errorMessageFunc);

    public static Aff<A> ToAffWithFailToUnprocessableEntity<A>(this Option<A> ma, string errorMessage = "")
        => ma.ToAff().MapFailToUnprocessableEntity(_ => errorMessage);

    public static Aff<A> ToAffWithFailToUnprocessableEntity<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToUnprocessableEntity(errorMessageFunc);

    public static Aff<A> ToAffWithFailToLocked<A>(this Option<A> ma, string errorMessage = "")
        => ma.ToAff().MapFailToLocked(_ => errorMessage);

    public static Aff<A> ToAffWithFailToLocked<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToLocked(errorMessageFunc);

    public static Aff<A> ToAffWithFailToInternalServerError<A>(this Option<A> ma, string errorMessage = "")
        => ma.ToAff().MapFailToInternalServerError(_ => errorMessage);

    public static Aff<A> ToAffWithFailToInternalServerError<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToAff().MapFailToInternalServerError(errorMessageFunc);

    public static Eff<A> ToEffWithFailToOK<A>(this Option<A> ma, string errorMessage = "")
        => ma.ToEff().MapFailToOK(_ => errorMessage);

    public static Eff<A> ToEffWithFailToOK<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToEff().MapFailToOK(errorMessageFunc);

    public static Eff<A> ToEffWithFailToCreated<A>(this Option<A> ma, string errorMessage = "")
        => ma.ToEff().MapFailToCreated(_ => errorMessage);

    public static Eff<A> ToEffWithFailToCreated<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToEff().MapFailToCreated(errorMessageFunc);

    public static Eff<A> ToEffWithFailToAccepted<A>(this Option<A> ma, string errorMessage = "")
        => ma.ToEff().MapFailToAccepted(_ => errorMessage);

    public static Eff<A> ToEffWithFailToAccepted<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToEff().MapFailToAccepted(errorMessageFunc);

    public static Eff<A> ToEffWithFailToNoContent<A>(this Option<A> ma, string errorMessage = "")
        => ma.ToEff().MapFailToNoContent(_ => errorMessage);

    public static Eff<A> ToEffWithFailToNoContent<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToEff().MapFailToNoContent(errorMessageFunc);

    public static Eff<A> ToEffWithFailToBadRequest<A>(this Option<A> ma, string errorMessage = "")
        => ma.ToEff().MapFailToBadRequest(_ => errorMessage);

    public static Eff<A> ToEffWithFailToBadRequest<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToEff().MapFailToBadRequest(errorMessageFunc);

    public static Eff<A> ToEffWithFailToUnauthorized<A>(this Option<A> ma, string errorMessage = "")
        => ma.ToEff().MapFailToUnauthorized(_ => errorMessage);

    public static Eff<A> ToEffWithFailToUnauthorized<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToEff().MapFailToUnauthorized(errorMessageFunc);

    public static Eff<A> ToEffWithFailToForbidden<A>(this Option<A> ma, string errorMessage = "")
        => ma.ToEff().MapFailToForbidden(_ => errorMessage);

    public static Eff<A> ToEffWithFailToForbidden<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToEff().MapFailToForbidden(errorMessageFunc);

    public static Eff<A> ToEffWithFailToNotFound<A>(this Option<A> ma, string errorMessage = "")
        => ma.ToEff().MapFailToNotFound(_ => errorMessage);

    public static Eff<A> ToEffWithFailToNotFound<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToEff().MapFailToNotFound(errorMessageFunc);

    public static Eff<A> ToEffWithFailToConflict<A>(this Option<A> ma, string errorMessage = "")
        => ma.ToEff().MapFailToConflict(_ => errorMessage);

    public static Eff<A> ToEffWithFailToConflict<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToEff().MapFailToConflict(errorMessageFunc);

    public static Eff<A> ToEffWithFailToUnprocessableEntity<A>(this Option<A> ma, string errorMessage = "")
        => ma.ToEff().MapFailToUnprocessableEntity(_ => errorMessage);

    public static Eff<A> ToEffWithFailToUnprocessableEntity<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToEff().MapFailToUnprocessableEntity(errorMessageFunc);

    public static Eff<A> ToEffWithFailToLocked<A>(this Option<A> ma, string errorMessage = "")
        => ma.ToEff().MapFailToLocked(_ => errorMessage);

    public static Eff<A> ToEffWithFailToLocked<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToEff().MapFailToLocked(errorMessageFunc);

    public static Eff<A> ToEffWithFailToInternalServerError<A>(this Option<A> ma, string errorMessage = "")
        => ma.ToEff().MapFailToInternalServerError(_ => errorMessage);

    public static Eff<A> ToEffWithFailToInternalServerError<A>(this Option<A> ma, Func<Error, string> errorMessageFunc)
        => ma.ToEff().MapFailToInternalServerError(errorMessageFunc);

    public static Aff<Option<A>> ToAffOptionWithFailToOK<A>(this Task<A> ma, string errorMessage = "")
        => ma.Map(Optional).ToAff().MapFailToOK(_ => errorMessage);

    public static Aff<Option<A>> ToAffOptionWithFailToOK<A>(this Task<A> ma, Func<Error, string> errorMessageFunc)
        => ma.Map(Optional).ToAff().MapFailToOK(errorMessageFunc);

    public static Aff<Option<A>> ToAffOptionWithFailToCreated<A>(this Task<A> ma, string errorMessage = "")
        => ma.Map(Optional).ToAff().MapFailToCreated(_ => errorMessage);

    public static Aff<Option<A>> ToAffOptionWithFailToCreated<A>(this Task<A> ma, Func<Error, string> errorMessageFunc)
        => ma.Map(Optional).ToAff().MapFailToCreated(errorMessageFunc);

    public static Aff<Option<A>> ToAffOptionWithFailToAccepted<A>(this Task<A> ma, string errorMessage = "")
        => ma.Map(Optional).ToAff().MapFailToAccepted(_ => errorMessage);

    public static Aff<Option<A>> ToAffOptionWithFailToAccepted<A>(this Task<A> ma, Func<Error, string> errorMessageFunc)
        => ma.Map(Optional).ToAff().MapFailToAccepted(errorMessageFunc);

    public static Aff<Option<A>> ToAffOptionWithFailToNoContent<A>(this Task<A> ma, string errorMessage = "")
        => ma.Map(Optional).ToAff().MapFailToNoContent(_ => errorMessage);

    public static Aff<Option<A>> ToAffOptionWithFailToNoContent<A>(this Task<A> ma, Func<Error, string> errorMessageFunc)
        => ma.Map(Optional).ToAff().MapFailToNoContent(errorMessageFunc);

    public static Aff<Option<A>> ToAffOptionWithFailToBadRequest<A>(this Task<A> ma, string errorMessage = "")
        => ma.Map(Optional).ToAff().MapFailToBadRequest(_ => errorMessage);

    public static Aff<Option<A>> ToAffOptionWithFailToBadRequest<A>(this Task<A> ma, Func<Error, string> errorMessageFunc)
        => ma.Map(Optional).ToAff().MapFailToBadRequest(errorMessageFunc);

    public static Aff<Option<A>> ToAffOptionWithFailToUnauthorized<A>(this Task<A> ma, string errorMessage = "")
        => ma.Map(Optional).ToAff().MapFailToUnauthorized(_ => errorMessage);

    public static Aff<Option<A>> ToAffOptionWithFailToUnauthorized<A>(this Task<A> ma, Func<Error, string> errorMessageFunc)
        => ma.Map(Optional).ToAff().MapFailToUnauthorized(errorMessageFunc);

    public static Aff<Option<A>> ToAffOptionWithFailToForbidden<A>(this Task<A> ma, string errorMessage = "")
        => ma.Map(Optional).ToAff().MapFailToForbidden(_ => errorMessage);

    public static Aff<Option<A>> ToAffOptionWithFailToForbidden<A>(this Task<A> ma, Func<Error, string> errorMessageFunc)
        => ma.Map(Optional).ToAff().MapFailToForbidden(errorMessageFunc);

    public static Aff<Option<A>> ToAffOptionWithFailToNotFound<A>(this Task<A> ma, string errorMessage = "")
        => ma.Map(Optional).ToAff().MapFailToNotFound(_ => errorMessage);

    public static Aff<Option<A>> ToAffOptionWithFailToNotFound<A>(this Task<A> ma, Func<Error, string> errorMessageFunc)
        => ma.Map(Optional).ToAff().MapFailToNotFound(errorMessageFunc);

    public static Aff<Option<A>> ToAffOptionWithFailToConflict<A>(this Task<A> ma, string errorMessage = "")
        => ma.Map(Optional).ToAff().MapFailToConflict(_ => errorMessage);

    public static Aff<Option<A>> ToAffOptionWithFailToConflict<A>(this Task<A> ma, Func<Error, string> errorMessageFunc)
        => ma.Map(Optional).ToAff().MapFailToConflict(errorMessageFunc);

    public static Aff<Option<A>> ToAffOptionWithFailToUnprocessableEntity<A>(this Task<A> ma, string errorMessage = "")
        => ma.Map(Optional).ToAff().MapFailToUnprocessableEntity(_ => errorMessage);

    public static Aff<Option<A>> ToAffOptionWithFailToUnprocessableEntity<A>(this Task<A> ma, Func<Error, string> errorMessageFunc)
        => ma.Map(Optional).ToAff().MapFailToUnprocessableEntity(errorMessageFunc);

    public static Aff<Option<A>> ToAffOptionWithFailToLocked<A>(this Task<A> ma, string errorMessage = "")
        => ma.Map(Optional).ToAff().MapFailToLocked(_ => errorMessage);

    public static Aff<Option<A>> ToAffOptionWithFailToLocked<A>(this Task<A> ma, Func<Error, string> errorMessageFunc)
        => ma.Map(Optional).ToAff().MapFailToLocked(errorMessageFunc);

    public static Aff<Option<A>> ToAffOptionWithFailToInternalServerError<A>(this Task<A> ma, string errorMessage = "")
        => ma.Map(Optional).ToAff().MapFailToInternalServerError(_ => errorMessage);

    public static Aff<Option<A>> ToAffOptionWithFailToInternalServerError<A>(this Task<A> ma, Func<Error, string> errorMessageFunc)
        => ma.Map(Optional).ToAff().MapFailToInternalServerError(errorMessageFunc);
}