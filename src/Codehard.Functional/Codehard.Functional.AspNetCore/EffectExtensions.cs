// <auto-generated/>
namespace Codehard.Functional.AspNetCore;

public static class EffectExtensions
{
    #region MapFail
    
    public static Eff<A> MapFailToOK<A>(
        this Eff<A> ma, 
        Option<string> errorCode = default,
        Option<string> message = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            HttpStatusCode.OK, errorCode, message, data, @override);

    public static Eff<A> MapFailToOK<A>(
        this Eff<A> ma,
        Func<Error, string> messageFunc,
        Option<string> errorCode = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            HttpStatusCode.OK, messageFunc, errorCode, data, @override);

    public static Eff<A> MapFailToCreated<A>(
        this Eff<A> ma,
        Option<string> errorCode = default,
        Option<string> errorMessage = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            HttpStatusCode.Created, errorCode, errorMessage, data, @override);

    public static Eff<A> MapFailToCreated<A>(
        this Eff<A> ma,
        Func<Error, string> messageFunc,
        Option<string> errorCode = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            HttpStatusCode.Created, messageFunc, errorCode, data, @override);

    public static Eff<A> MapFailToAccepted<A>(
        this Eff<A> ma,
        Option<string> errorCode = default,
        Option<string> errorMessage = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            HttpStatusCode.Accepted, errorCode, errorMessage, data, @override);

    public static Eff<A> MapFailToAccepted<A>(
        this Eff<A> ma,
        Func<Error, string> messageFunc,
        Option<string> errorCode = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            HttpStatusCode.Accepted, messageFunc, errorCode, data, @override);

    public static Eff<A> MapFailToNoContent<A>(
        this Eff<A> ma, 
        Option<string> errorCode = default,
        Option<string> message = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            HttpStatusCode.NoContent, errorCode, message, data, @override);

    public static Eff<A> MapFailToNoContent<A>(
        this Eff<A> ma,
        Func<Error, string> messageFunc,
        Option<string> errorCode = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            HttpStatusCode.NoContent, messageFunc, errorCode, data, @override);

    public static Eff<A> MapFailToBadRequest<A>(
        this Eff<A> ma, 
        Option<string> errorCode = default,
        Option<string> message = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            HttpStatusCode.BadRequest, errorCode, message, data, @override);

    public static Eff<A> MapFailToBadRequest<A>(
        this Eff<A> ma,
        Func<Error, string> messageFunc,
        Option<string> errorCode = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            HttpStatusCode.BadRequest, messageFunc, errorCode, data, @override);

    public static Eff<A> MapFailToUnauthorized<A>(
        this Eff<A> ma, 
        Option<string> errorCode = default,
        Option<string> message = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            HttpStatusCode.Unauthorized, errorCode, message, data, @override);

    public static Eff<A> MapFailToUnauthorized<A>(
        this Eff<A> ma,
        Func<Error, string> messageFunc,
        Option<string> errorCode = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            HttpStatusCode.Unauthorized, messageFunc, errorCode, data, @override);

    public static Eff<A> MapFailToForbidden<A>(
        this Eff<A> ma, 
        Option<string> errorCode = default,
        Option<string> message = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            HttpStatusCode.Forbidden, errorCode, message, data, @override);

    public static Eff<A> MapFailToForbidden<A>(
        this Eff<A> ma,
        Func<Error, string> messageFunc,
        Option<string> errorCode = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            HttpStatusCode.Forbidden, messageFunc, errorCode, data, @override);

    public static Eff<A> MapFailToNotFound<A>(
        this Eff<A> ma, 
        Option<string> errorCode = default,
        Option<string> message = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            HttpStatusCode.NotFound, errorCode, message, data, @override);

    public static Eff<A> MapFailToNotFound<A>(
        this Eff<A> ma,
        Func<Error, string> messageFunc,
        Option<string> errorCode = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            HttpStatusCode.NotFound, messageFunc, errorCode, data, @override);

    public static Eff<A> MapFailToConflict<A>(
        this Eff<A> ma, 
        Option<string> errorCode = default,
        Option<string> message = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            HttpStatusCode.Conflict, errorCode, message, data, @override);

    public static Eff<A> MapFailToConflict<A>(
        this Eff<A> ma,
        Func<Error, string> messageFunc,
        Option<string> errorCode = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            HttpStatusCode.Conflict, messageFunc, errorCode, data, @override);

    public static Eff<A> MapFailToUnprocessableEntity<A>(
        this Eff<A> ma, 
        Option<string> errorCode = default,
        Option<string> message = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            (HttpStatusCode)422, errorCode, message, data, @override);

    public static Eff<A> MapFailToUnprocessableEntity<A>(
        this Eff<A> ma,
        Func<Error, string> messageFunc,
        Option<string> errorCode = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            (HttpStatusCode)422, messageFunc, errorCode, data, @override);

    public static Eff<A> MapFailToLocked<A>(
        this Eff<A> ma, 
        Option<string> errorCode = default,
        Option<string> message = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            (HttpStatusCode)423, errorCode, message, data, @override);

    public static Eff<A> MapFailToLocked<A>(
        this Eff<A> ma,
        Func<Error, string> messageFunc,
        Option<string> errorCode = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            (HttpStatusCode)423, messageFunc, errorCode, data, @override);

    public static Eff<A> MapFailToInternalServerError<A>(
        this Eff<A> ma, 
        Option<string> errorCode = default,
        Option<string> message = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            HttpStatusCode.InternalServerError, errorCode, message, data, @override);

    public static Eff<A> MapFailToInternalServerError<A>(
        this Eff<A> ma,
        Func<Error, string> messageFunc,
        Option<string> errorCode = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            HttpStatusCode.InternalServerError, messageFunc, errorCode, data, @override);
    
    #endregion
    
    #region Guard

    public static Eff<A> GuardWithHttpStatus<A>(
        this Eff<A> ma, Func<A, bool> predicate, HttpStatusCode httpStatusCode, string message = "")
        => ma.Guard(
            predicate,
            HttpResultError.New(httpStatusCode, message));

    public static Eff<A> GuardWithHttpStatus<A>(
        this Eff<A> ma, Func<A, bool> predicate, HttpStatusCode httpStatusCode, Func<A, string> messageFunc)
        => ma.Guard(
            predicate, 
            a => HttpResultError.New(httpStatusCode, messageFunc(a)));

    public static Eff<A> GuardWithOK<A>(
        this Eff<A> ma, Func<A, bool> predicate, string message = "")
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.OK, message);

    public static Eff<A> GuardWithOK<A>(
        this Eff<A> ma, Func<A, bool> predicate, Func<A, string> messageFunc)
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.OK, messageFunc);

    public static Eff<A> GuardWithCreated<A>(
        this Eff<A> ma, Func<A, bool> predicate, string message = "")
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.Created, message);

    public static Eff<A> GuardWithCreated<A>(
        this Eff<A> ma, Func<A, bool> predicate, Func<A, string> messageFunc)
    => ma.GuardWithHttpStatus(predicate, HttpStatusCode.Created, messageFunc);

    public static Eff<A> GuardWithAccepted<A>(
        this Eff<A> ma, Func<A, bool> predicate, string message = "")
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.Accepted, message);

    public static Eff<A> GuardWithAccepted<A>(
        this Eff<A> ma, Func<A, bool> predicate, Func<A, string> messageFunc)
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.Accepted, messageFunc);

    public static Eff<A> GuardWithNoContent<A>(
        this Eff<A> ma, Func<A, bool> predicate, string message = "")
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.NoContent, message);

    public static Eff<A> GuardWithNoContent<A>(
        this Eff<A> ma, Func<A, bool> predicate, Func<A, string> messageFunc)
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.NoContent, messageFunc);

    public static Eff<A> GuardWithBadRequest<A>(
        this Eff<A> ma, Func<A, bool> predicate, string message = "")
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.BadRequest, message);

    public static Eff<A> GuardWithBadRequest<A>(
        this Eff<A> ma, Func<A, bool> predicate, Func<A, string> messageFunc)
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.BadRequest, messageFunc);

    public static Eff<A> GuardWithUnauthorized<A>(
        this Eff<A> ma, Func<A, bool> predicate, string message = "")
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.Unauthorized, message);

    public static Eff<A> GuardWithUnauthorized<A>(
        this Eff<A> ma, Func<A, bool> predicate, Func<A, string> messageFunc)
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.Unauthorized, messageFunc);

    public static Eff<A> GuardWithForbidden<A>(
        this Eff<A> ma, Func<A, bool> predicate, string message = "")
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.Forbidden, message);

    public static Eff<A> GuardWithForbidden<A>(
        this Eff<A> ma, Func<A, bool> predicate, Func<A, string> messageFunc)
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.Forbidden, messageFunc);

    public static Eff<A> GuardWithNotFound<A>(
        this Eff<A> ma, Func<A, bool> predicate, string message = "")
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.NotFound, message);

    public static Eff<A> GuardWithNotFound<A>(
        this Eff<A> ma, Func<A, bool> predicate, Func<A, string> messageFunc)
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.NotFound, messageFunc);

    public static Eff<A> GuardWithConflict<A>(
        this Eff<A> ma, Func<A, bool> predicate, string message = "")
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.Conflict, message);

    public static Eff<A> GuardWithConflict<A>(
        this Eff<A> ma, Func<A, bool> predicate, Func<A, string> messageFunc)
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.Conflict, messageFunc);

    public static Eff<A> GuardWithUnprocessableEntity<A>(
        this Eff<A> ma, Func<A, bool> predicate, string message = "")
        => ma.GuardWithHttpStatus(predicate, (HttpStatusCode)422, message);

    public static Eff<A> GuardWithUnprocessableEntity<A>(
        this Eff<A> ma, Func<A, bool> predicate, Func<A, string> messageFunc)
        => ma.GuardWithHttpStatus(predicate, (HttpStatusCode)422, messageFunc);

    public static Eff<A> GuardWithLocked<A>(
        this Eff<A> ma, Func<A, bool> predicate, string message = "")
        => ma.GuardWithHttpStatus(predicate, (HttpStatusCode)423, message);

    public static Eff<A> GuardWithLocked<A>(
        this Eff<A> ma, Func<A, bool> predicate, Func<A, string> messageFunc)
        => ma.GuardWithHttpStatus(predicate, (HttpStatusCode)423, messageFunc);

    public static Eff<A> GuardWithInternalServerError<A>(
        this Eff<A> ma, Func<A, bool> predicate, string message = "")
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.InternalServerError, message);

    public static Eff<A> GuardWithInternalServerError<A>(
        this Eff<A> ma, Func<A, bool> predicate, Func<A, string> messageFunc)
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.InternalServerError, messageFunc);

    #endregion

    #region Eff<Option<A>>

    public static Eff<A> MapNoneToOK<A>(this Eff<Option<A>> ma, string message = "")
        => ma.Bind(opt => opt.ToEffWithFailToOK(message));

    public static Eff<A> MapNoneToCreated<A>(this Eff<Option<A>> ma, string message = "")
        => ma.Bind(opt => opt.ToEffWithFailToCreated(message));

    public static Eff<A> MapNoneToAccepted<A>(this Eff<Option<A>> ma, string message = "")
        => ma.Bind(opt => opt.ToEffWithFailToAccepted(message));

    public static Eff<A> MapNoneToNoContent<A>(this Eff<Option<A>> ma, string message = "")
        => ma.Bind(opt => opt.ToEffWithFailToNoContent(message));

    public static Eff<A> MapNoneToBadRequest<A>(this Eff<Option<A>> ma, string message = "")
        => ma.Bind(opt => opt.ToEffWithFailToBadRequest(message));

    public static Eff<A> MapNoneToUnauthorized<A>(this Eff<Option<A>> ma, string message = "")
        => ma.Bind(opt => opt.ToEffWithFailToUnauthorized(message));

    public static Eff<A> MapNoneToForbidden<A>(this Eff<Option<A>> ma, string message = "")
        => ma.Bind(opt => opt.ToEffWithFailToForbidden(message));

    public static Eff<A> MapNoneToNotFound<A>(this Eff<Option<A>> ma, string message = "")
        => ma.Bind(opt => opt.ToEffWithFailToNotFound(message));

    public static Eff<A> MapNoneToConflict<A>(this Eff<Option<A>> ma, string message = "")
        => ma.Bind(opt => opt.ToEffWithFailToConflict(message));

    public static Eff<A> MapNoneToUnprocessableEntity<A>(this Eff<Option<A>> ma, string message = "")
        => ma.Bind(opt => opt.ToEffWithFailToUnprocessableEntity(message));

    public static Eff<A> MapNoneToLocked<A>(this Eff<Option<A>> ma, string message = "")
        => ma.Bind(opt => opt.ToEffWithFailToLocked(message));

    public static Eff<A> MapNoneToInternalServerError<A>(this Eff<Option<A>> ma, string message = "")
        => ma.Bind(opt => opt.ToEffWithFailToInternalServerError(message));

    #endregion
}