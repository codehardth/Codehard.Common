// <auto-generated/>
#nullable enable

using Codehard.Functional.AspNetCore.Errors;
using Codehard.Functional.AspNetCore.Extensions;

namespace Codehard.Functional.AspNetCore;

public static class AsyncEffectExtensions
{
    #region MapFail

    /// <summary>
    /// Maps the failure result of an Aff&lt;A&gt; to an IActionResult.
    /// </summary>
    /// <typeparam name="A">The type of the result value inside the Aff.</typeparam>
    /// <param name="ma">The Aff&lt;A&gt; to map.</param>
    /// <param name="actionResult">The IActionResult to use as the error result.</param>
    /// <param name="override">Flag indicating whether to override the status code of the actionResult.</param>
    /// <returns>An Aff&lt;A&gt; with the failure result mapped to the specified IActionResult.</returns>
    public static Aff<A> MapFailToActionResult<A>(
        this Aff<A> ma,
        IActionResult actionResult,
        bool @override = true)
        => ma.MapFail(err => @override ? ActionResultError.New(actionResult) : err);
    
    internal static Aff<A> MapFailToHttpResultError<A>(
        this Aff<A> ma,
        HttpStatusCode code,
        Option<string> errorCode = default,
        Option<string> messageOpt = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFail(err =>
        {
            var message = messageOpt.IfNone(string.Empty);
            
            return
                err switch
                {
                    HttpResultError hre when !@override => hre,
                    _ => 
                        HttpResultError.New(
                            code, message, errorCode, data, err),
                };
        });
    
    internal static Aff<A> MapFailToHttpResultError<A>(
        this Aff<A> ma,
        HttpStatusCode code,
        Func<Error, string> messageFunc,
        Option<string> errorCode = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFail(err =>
        {
            return
                err switch
                {
                    HttpResultError hre when !@override => hre,
                    _ => 
                        HttpResultError.New(
                            code,
                            messageFunc(err),
                            errorCode,
                            data,
                            err),
                };
        });

    /// <summary>
    /// Maps the failure result of an Aff&lt;A&gt; to an HTTP 200 OK result with optional error code, message, and data.
    /// </summary>
    /// <typeparam name="A">The type of the result value inside the Aff.</typeparam>
    /// <param name="ma">The Aff&lt;A&gt; to map.</param>
    /// <param name="errorCode">Optional error code associated with the failure.</param>
    /// <param name="message">Optional error message associated with the failure.</param>
    /// <param name="data">Optional data associated with the failure.</param>
    /// <param name="override">Flag indicating whether to override the status code to HTTP 200 OK.</param>
    /// <returns>An Aff&lt;A&gt; with the failure result mapped to an HTTP 200 OK result.</returns>
    public static Aff<A> MapFailToOK<A>(
        this Aff<A> ma, 
        Option<string> errorCode = default,
        Option<string> message = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            HttpStatusCode.OK, errorCode, message, data, @override);
    
    /// <summary>
    /// Maps the failure result of an Aff&lt;A&gt; to an HTTP 200 OK result with custom error message generation, optional error code, and data.
    /// </summary>
    /// <typeparam name="A">The type of the result value inside the Aff.</typeparam>
    /// <param name="ma">The Aff&lt;A&gt; to map.</param>
    /// <param name="messageFunc">A function that generates a custom error message based on the failure.</param>
    /// <param name="errorCode">Optional error code associated with the failure.</param>
    /// <param name="data">Optional data associated with the failure.</param>
    /// <param name="override">Flag indicating whether to override the status code to HTTP 200 OK.</param>
    /// <returns>An Aff&lt;A&gt; with the failure result mapped to an HTTP 200 OK result.</returns>
    public static Aff<A> MapFailToOK<A>(
        this Aff<A> ma,
        Func<Error, string> messageFunc,
        Option<string> errorCode = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            HttpStatusCode.OK, messageFunc, errorCode, data, @override);

    public static Aff<A> MapFailToCreated<A>(
        this Aff<A> ma,
        Option<string> errorCode = default,
        Option<string> errorMessage = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            HttpStatusCode.Created, errorCode, errorMessage, data, @override);

    public static Aff<A> MapFailToCreated<A>(
        this Aff<A> ma,
        Func<Error, string> messageFunc,
        Option<string> errorCode = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            HttpStatusCode.Created, messageFunc, errorCode, data, @override);

    public static Aff<A> MapFailToAccepted<A>(
        this Aff<A> ma,
        Option<string> errorCode = default,
        Option<string> errorMessage = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            HttpStatusCode.Accepted, errorCode, errorMessage, data, @override);

    public static Aff<A> MapFailToAccepted<A>(
        this Aff<A> ma,
        Func<Error, string> messageFunc,
        Option<string> errorCode = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            HttpStatusCode.Accepted, messageFunc, errorCode, data, @override);

    public static Aff<A> MapFailToNoContent<A>(
        this Aff<A> ma, 
        Option<string> errorCode = default,
        Option<string> message = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            HttpStatusCode.NoContent, errorCode, message, data, @override);

    public static Aff<A> MapFailToNoContent<A>(
        this Aff<A> ma,
        Func<Error, string> messageFunc,
        Option<string> errorCode = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            HttpStatusCode.NoContent, messageFunc, errorCode, data, @override);

    public static Aff<A> MapFailToBadRequest<A>(
        this Aff<A> ma, 
        Option<string> errorCode = default,
        Option<string> message = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            HttpStatusCode.BadRequest, errorCode, message, data, @override);

    public static Aff<A> MapFailToBadRequest<A>(
        this Aff<A> ma,
        Func<Error, string> messageFunc,
        Option<string> errorCode = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            HttpStatusCode.BadRequest, messageFunc, errorCode, data, @override);

    public static Aff<A> MapFailToUnauthorized<A>(
        this Aff<A> ma, 
        Option<string> errorCode = default,
        Option<string> message = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            HttpStatusCode.Unauthorized, errorCode, message, data, @override);

    public static Aff<A> MapFailToUnauthorized<A>(
        this Aff<A> ma,
        Func<Error, string> messageFunc,
        Option<string> errorCode = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            HttpStatusCode.Unauthorized, messageFunc, errorCode, data, @override);

    public static Aff<A> MapFailToForbidden<A>(
        this Aff<A> ma, 
        Option<string> errorCode = default,
        Option<string> message = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            HttpStatusCode.Forbidden, errorCode, message, data, @override);

    public static Aff<A> MapFailToForbidden<A>(
        this Aff<A> ma,
        Func<Error, string> messageFunc,
        Option<string> errorCode = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            HttpStatusCode.Forbidden, messageFunc, errorCode, data, @override);

    public static Aff<A> MapFailToNotFound<A>(
        this Aff<A> ma, 
        Option<string> errorCode = default,
        Option<string> message = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            HttpStatusCode.NotFound, errorCode, message, data, @override);

    public static Aff<A> MapFailToNotFound<A>(
        this Aff<A> ma,
        Func<Error, string> messageFunc,
        Option<string> errorCode = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            HttpStatusCode.NotFound, messageFunc, errorCode, data, @override);

    public static Aff<A> MapFailToConflict<A>(
        this Aff<A> ma, 
        Option<string> errorCode = default,
        Option<string> message = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            HttpStatusCode.Conflict, errorCode, message, data, @override);

    public static Aff<A> MapFailToConflict<A>(
        this Aff<A> ma,
        Func<Error, string> messageFunc,
        Option<string> errorCode = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            HttpStatusCode.Conflict, messageFunc, errorCode, data, @override);

    public static Aff<A> MapFailToUnprocessableEntity<A>(
        this Aff<A> ma, 
        Option<string> errorCode = default,
        Option<string> message = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            HttpStatusCode.UnprocessableEntity, errorCode, message, data, @override);

    public static Aff<A> MapFailToUnprocessableEntity<A>(
        this Aff<A> ma,
        Func<Error, string> messageFunc,
        Option<string> errorCode = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            HttpStatusCode.UnprocessableEntity, messageFunc, errorCode, data, @override);

    public static Aff<A> MapFailToLocked<A>(
        this Aff<A> ma, 
        Option<string> errorCode = default,
        Option<string> message = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            HttpStatusCode.Locked, errorCode, message, data, @override);

    public static Aff<A> MapFailToLocked<A>(
        this Aff<A> ma,
        Func<Error, string> messageFunc,
        Option<string> errorCode = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            HttpStatusCode.Locked, messageFunc, errorCode, data, @override);

    public static Aff<A> MapFailToInternalServerError<A>(
        this Aff<A> ma, 
        Option<string> errorCode = default,
        Option<string> message = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            HttpStatusCode.InternalServerError, errorCode, message, data, @override);

    public static Aff<A> MapFailToInternalServerError<A>(
        this Aff<A> ma,
        Func<Error, string> messageFunc,
        Option<string> errorCode = default,
        Option<object> data = default,
        bool @override = true)
        => ma.MapFailToHttpResultError(
            HttpStatusCode.InternalServerError, messageFunc, errorCode, data, @override);

    #endregion

    #region Guard

    public static Aff<A> GuardWithHttpStatus<A>(
        this Aff<A> ma,
        Func<A, bool> predicate,
        HttpStatusCode httpStatusCode,
        string message = "")
        => ma.Guard(
            predicate,
            HttpResultError.New(httpStatusCode, message));

    public static Aff<A> GuardWithHttpStatus<A>(
        this Aff<A> ma,
        Func<A, bool> predicate,
        HttpStatusCode httpStatusCode,
        Func<A, string> messageFunc)
        => ma.Guard(
            predicate,
            a => HttpResultError.New(httpStatusCode, messageFunc(a)));

    public static Aff<A> GuardWithOK<A>(
        this Aff<A> ma, Func<A, bool> predicate, string message = "")
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.OK, message);

    public static Aff<A> GuardWithOK<A>(
        this Aff<A> ma, Func<A, bool> predicate, Func<A, string> messageFunc)
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.OK, messageFunc);

    public static Aff<A> GuardWithCreated<A>(
        this Aff<A> ma, Func<A, bool> predicate, string message = "")
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.Created, message);

    public static Aff<A> GuardWithCreated<A>(
        this Aff<A> ma, Func<A, bool> predicate, Func<A, string> messageFunc)
    => ma.GuardWithHttpStatus(predicate, HttpStatusCode.Created, messageFunc);

    public static Aff<A> GuardWithAccepted<A>(
        this Aff<A> ma, Func<A, bool> predicate, string message = "")
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.Accepted, message);

    public static Aff<A> GuardWithAccepted<A>(
        this Aff<A> ma, Func<A, bool> predicate, Func<A, string> messageFunc)
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.Accepted, messageFunc);

    public static Aff<A> GuardWithNoContent<A>(
        this Aff<A> ma, Func<A, bool> predicate, string message = "")
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.NoContent, message);

    public static Aff<A> GuardWithNoContent<A>(
        this Aff<A> ma, Func<A, bool> predicate, Func<A, string> messageFunc)
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.NoContent, messageFunc);

    public static Aff<A> GuardWithBadRequest<A>(
        this Aff<A> ma, Func<A, bool> predicate, string message = "")
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.BadRequest, message);

    public static Aff<A> GuardWithBadRequest<A>(
        this Aff<A> ma, Func<A, bool> predicate, Func<A, string> messageFunc)
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.BadRequest, messageFunc);

    public static Aff<A> GuardWithUnauthorized<A>(
        this Aff<A> ma, Func<A, bool> predicate, string message = "")
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.Unauthorized, message);

    public static Aff<A> GuardWithUnauthorized<A>(
        this Aff<A> ma, Func<A, bool> predicate, Func<A, string> messageFunc)
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.Unauthorized, messageFunc);

    public static Aff<A> GuardWithForbidden<A>(
        this Aff<A> ma, Func<A, bool> predicate, string message = "")
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.Forbidden, message);

    public static Aff<A> GuardWithForbidden<A>(
        this Aff<A> ma, Func<A, bool> predicate, Func<A, string> messageFunc)
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.Forbidden, messageFunc);

    public static Aff<A> GuardWithNotFound<A>(
        this Aff<A> ma, Func<A, bool> predicate, string message = "")
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.NotFound, message);

    public static Aff<A> GuardWithNotFound<A>(
        this Aff<A> ma, Func<A, bool> predicate, Func<A, string> messageFunc)
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.NotFound, messageFunc);

    public static Aff<A> GuardWithConflict<A>(
        this Aff<A> ma, Func<A, bool> predicate, string message = "")
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.Conflict, message);

    public static Aff<A> GuardWithConflict<A>(
        this Aff<A> ma, Func<A, bool> predicate, Func<A, string> messageFunc)
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.Conflict, messageFunc);

    public static Aff<A> GuardWithUnprocessableEntity<A>(
        this Aff<A> ma, Func<A, bool> predicate, string message = "")
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.UnprocessableEntity, message);

    public static Aff<A> GuardWithUnprocessableEntity<A>(
        this Aff<A> ma, Func<A, bool> predicate, Func<A, string> messageFunc)
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.UnprocessableEntity, messageFunc);

    public static Aff<A> GuardWithLocked<A>(
        this Aff<A> ma, Func<A, bool> predicate, string message = "")
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.Locked, message);

    public static Aff<A> GuardWithLocked<A>(
        this Aff<A> ma, Func<A, bool> predicate, Func<A, string> messageFunc)
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.Locked, messageFunc);

    public static Aff<A> GuardWithInternalServerError<A>(
        this Aff<A> ma, Func<A, bool> predicate, string message = "")
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.InternalServerError, message);

    public static Aff<A> GuardWithInternalServerError<A>(
        this Aff<A> ma, Func<A, bool> predicate, Func<A, string> messageFunc)
        => ma.GuardWithHttpStatus(predicate, HttpStatusCode.InternalServerError, messageFunc);

    #endregion

    #region Aff<Option<A>>

    public static Aff<A> MapNoneToOK<A>(this Aff<Option<A>> ma, string message = "")
        => ma.Bind(opt => opt.ToAffWithFailToOK(message));

    public static Aff<A> MapNoneToCreated<A>(this Aff<Option<A>> ma, string message = "")
        => ma.Bind(opt => opt.ToAffWithFailToCreated(message));

    public static Aff<A> MapNoneToAccepted<A>(this Aff<Option<A>> ma, string message = "")
        => ma.Bind(opt => opt.ToAffWithFailToAccepted(message));

    public static Aff<A> MapNoneToNoContent<A>(this Aff<Option<A>> ma, string message = "")
        => ma.Bind(opt => opt.ToAffWithFailToNoContent(message));

    public static Aff<A> MapNoneToBadRequest<A>(this Aff<Option<A>> ma, string message = "")
        => ma.Bind(opt => opt.ToAffWithFailToBadRequest(message));

    public static Aff<A> MapNoneToUnauthorized<A>(this Aff<Option<A>> ma, string message = "")
        => ma.Bind(opt => opt.ToAffWithFailToUnauthorized(message));

    public static Aff<A> MapNoneToForbidden<A>(this Aff<Option<A>> ma, string message = "")
        => ma.Bind(opt => opt.ToAffWithFailToForbidden(message));

    public static Aff<A> MapNoneToNotFound<A>(this Aff<Option<A>> ma, string message = "")
        => ma.Bind(opt => opt.ToAffWithFailToNotFound(message));

    public static Aff<A> MapNoneToConflict<A>(this Aff<Option<A>> ma, string message = "")
        => ma.Bind(opt => opt.ToAffWithFailToConflict(message));

    public static Aff<A> MapNoneToUnprocessableEntity<A>(this Aff<Option<A>> ma, string message = "")
        => ma.Bind(opt => opt.ToAffWithFailToUnprocessableEntity(message));

    public static Aff<A> MapNoneToLocked<A>(this Aff<Option<A>> ma, string message = "")
        => ma.Bind(opt => opt.ToAffWithFailToLocked(message));

    public static Aff<A> MapNoneToInternalServerError<A>(this Aff<Option<A>> ma, string message = "")
        => ma.Bind(opt => opt.ToAffWithFailToInternalServerError(message));

    #endregion
    
    #region Result
    
    /// <summary>
    /// Run the async effect into IActionResult in an asynchronous manner.
    /// </summary>
    /// <param name="aff"></param>
    /// <param name="successStatusCode"></param>
    /// <param name="logger"></param>
    /// <typeparam name="T"></typeparam>
    /// <returns></returns>
    public static ValueTask<IActionResult> RunToResultAsync<T>(
        this Aff<T> aff,
        HttpStatusCode successStatusCode = HttpStatusCode.OK,
        ILogger? logger = default)
    {
        return aff
            .Run()
            .Map(fin => 
                fin.MatchToResult(
                    successStatusCode: successStatusCode,
                    logger: logger));
    }
    
    #endregion
}