// <auto-generated/>
namespace Codehard.Functional.AspNetCore.Extensions;

public static class ValidationExtensions
{
    public static Aff<A> ToAffWithFailToOK<A>(this Validation<Error, A> ma, int errorCode, string errorMessage = "")
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToOK(_ => errorMessage);

    public static Aff<A> ToAffWithFailToOK<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToOK(errorMessageFunc);

    public static Aff<A> ToAffWithFailToCreated<A>(this Validation<Error, A> ma, int errorCode, string errorMessage = "")
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToCreated(_ => errorMessage);

    public static Aff<A> ToAffWithFailToCreated<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToCreated(errorMessageFunc);

    public static Aff<A> ToAffWithFailToAccepted<A>(this Validation<Error, A> ma, int errorCode, string errorMessage = "")
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToAccepted(_ => errorMessage);

    public static Aff<A> ToAffWithFailToAccepted<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToAccepted(errorMessageFunc);

    public static Aff<A> ToAffWithFailToNoContent<A>(this Validation<Error, A> ma, int errorCode, string errorMessage = "")
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToNoContent(_ => errorMessage);

    public static Aff<A> ToAffWithFailToNoContent<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToNoContent(errorMessageFunc);

    public static Aff<A> ToAffWithFailToBadRequest<A>(this Validation<Error, A> ma, int errorCode, string errorMessage = "")
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToBadRequest(_ => errorMessage);

    public static Aff<A> ToAffWithFailToBadRequest<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToBadRequest(errorMessageFunc);

    public static Aff<A> ToAffWithFailToUnauthorized<A>(this Validation<Error, A> ma, int errorCode, string errorMessage = "")
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToUnauthorized(_ => errorMessage);

    public static Aff<A> ToAffWithFailToUnauthorized<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToUnauthorized(errorMessageFunc);

    public static Aff<A> ToAffWithFailToForbidden<A>(this Validation<Error, A> ma, int errorCode, string errorMessage = "")
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToForbidden(_ => errorMessage);

    public static Aff<A> ToAffWithFailToForbidden<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToForbidden(errorMessageFunc);

    public static Aff<A> ToAffWithFailToNotFound<A>(this Validation<Error, A> ma, int errorCode, string errorMessage = "")
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToNotFound(_ => errorMessage);

    public static Aff<A> ToAffWithFailToNotFound<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToNotFound(errorMessageFunc);

    public static Aff<A> ToAffWithFailToConflict<A>(this Validation<Error, A> ma, int errorCode, string errorMessage = "")
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToConflict(_ => errorMessage);

    public static Aff<A> ToAffWithFailToConflict<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToConflict(errorMessageFunc);

    public static Aff<A> ToAffWithFailToUnprocessableEntity<A>(this Validation<Error, A> ma, int errorCode, string errorMessage = "")
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToUnprocessableEntity(_ => errorMessage);

    public static Aff<A> ToAffWithFailToUnprocessableEntity<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToUnprocessableEntity(errorMessageFunc);

    public static Aff<A> ToAffWithFailToLocked<A>(this Validation<Error, A> ma, int errorCode, string errorMessage = "")
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToLocked(_ => errorMessage);

    public static Aff<A> ToAffWithFailToLocked<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToLocked(errorMessageFunc);

    public static Aff<A> ToAffWithFailToInternalServerError<A>(this Validation<Error, A> ma, int errorCode, string errorMessage = "")
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToInternalServerError(_ => errorMessage);

    public static Aff<A> ToAffWithFailToInternalServerError<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToAff(se => se.Flatten(errorCode)).MapFailToInternalServerError(errorMessageFunc);

    public static Eff<A> ToEffWithFailToOK<A>(this Validation<Error, A> ma, int errorCode, string errorMessage = "")
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToOK(_ => errorMessage);

    public static Eff<A> ToEffWithFailToOK<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToOK(errorMessageFunc);

    public static Eff<A> ToEffWithFailToCreated<A>(this Validation<Error, A> ma, int errorCode, string errorMessage = "")
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToCreated(_ => errorMessage);

    public static Eff<A> ToEffWithFailToCreated<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToCreated(errorMessageFunc);

    public static Eff<A> ToEffWithFailToAccepted<A>(this Validation<Error, A> ma, int errorCode, string errorMessage = "")
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToAccepted(_ => errorMessage);

    public static Eff<A> ToEffWithFailToAccepted<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToAccepted(errorMessageFunc);

    public static Eff<A> ToEffWithFailToNoContent<A>(this Validation<Error, A> ma, int errorCode, string errorMessage = "")
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToNoContent(_ => errorMessage);

    public static Eff<A> ToEffWithFailToNoContent<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToNoContent(errorMessageFunc);

    public static Eff<A> ToEffWithFailToBadRequest<A>(this Validation<Error, A> ma, int errorCode, string errorMessage = "")
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToBadRequest(_ => errorMessage);

    public static Eff<A> ToEffWithFailToBadRequest<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToBadRequest(errorMessageFunc);

    public static Eff<A> ToEffWithFailToUnauthorized<A>(this Validation<Error, A> ma, int errorCode, string errorMessage = "")
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToUnauthorized(_ => errorMessage);

    public static Eff<A> ToEffWithFailToUnauthorized<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToUnauthorized(errorMessageFunc);

    public static Eff<A> ToEffWithFailToForbidden<A>(this Validation<Error, A> ma, int errorCode, string errorMessage = "")
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToForbidden(_ => errorMessage);

    public static Eff<A> ToEffWithFailToForbidden<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToForbidden(errorMessageFunc);

    public static Eff<A> ToEffWithFailToNotFound<A>(this Validation<Error, A> ma, int errorCode, string errorMessage = "")
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToNotFound(_ => errorMessage);

    public static Eff<A> ToEffWithFailToNotFound<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToNotFound(errorMessageFunc);

    public static Eff<A> ToEffWithFailToConflict<A>(this Validation<Error, A> ma, int errorCode, string errorMessage = "")
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToConflict(_ => errorMessage);

    public static Eff<A> ToEffWithFailToConflict<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToConflict(errorMessageFunc);

    public static Eff<A> ToEffWithFailToUnprocessableEntity<A>(this Validation<Error, A> ma, int errorCode, string errorMessage = "")
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToUnprocessableEntity(_ => errorMessage);

    public static Eff<A> ToEffWithFailToUnprocessableEntity<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToUnprocessableEntity(errorMessageFunc);

    public static Eff<A> ToEffWithFailToLocked<A>(this Validation<Error, A> ma, int errorCode, string errorMessage = "")
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToLocked(_ => errorMessage);

    public static Eff<A> ToEffWithFailToLocked<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToLocked(errorMessageFunc);

    public static Eff<A> ToEffWithFailToInternalServerError<A>(this Validation<Error, A> ma, int errorCode, string errorMessage = "")
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToInternalServerError(_ => errorMessage);

    public static Eff<A> ToEffWithFailToInternalServerError<A>(this Validation<Error, A> ma, int errorCode, Func<Error, string> errorMessageFunc)
        => ma.ToEff(se => se.Flatten(errorCode)).MapFailToInternalServerError(errorMessageFunc);
}