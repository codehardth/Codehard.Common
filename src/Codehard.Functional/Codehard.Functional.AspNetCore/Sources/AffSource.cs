using System.Net;
using System.Text;
using Codehard.Functional.AspNetCore.Shared;

namespace Codehard.Functional.AspNetCore.Sources;

internal static class AffSource
{
    public static string FileName = "AsyncEffectExtensions.g.cs";

    public static string Generate()
    {
        var sb = new StringBuilder();

        sb.AppendLine("// <auto-generated/>");
        sb.AppendLine("using System.Net;");
        sb.AppendLine("using LanguageExt;");
        sb.AppendLine("using LanguageExt.Common;");
        sb.AppendLine("using Microsoft.AspNetCore.Mvc;");
        sb.AppendLine();
        sb.AppendLine($"namespace {Constants.Namespace};");
        sb.AppendLine();
        sb.AppendLine("public static class AsyncEffectExtensions");
        sb.AppendLine("{");

        var type = typeof(HttpStatusCode);

        var statusCodes =
            Enum.GetValues(type)
                .Cast<HttpStatusCode>()
                .Distinct()
                .Select(s => Enum.GetName(type, s))
                .ToArray();

        // Map fail
        sb.AppendLine(
            "    public static Aff<A> MapFailToActionResult<A>(");
        sb.AppendLine(
            "        this Aff<A> ma,");
        sb.AppendLine(
            "        IActionResult actionResult,");
        sb.AppendLine(
            "        Option<string> errorCode = default,");
        sb.AppendLine(
            "        Option<string> message = default,");
        sb.AppendLine(
            "        bool @override = true)");
        sb.AppendLine(
            "        => ma.MapFailToHttpResultError(");
        sb.AppendLine(
            "            HttpStatusCode.OK, errorCode, message, (object)actionResult, @override);");

        foreach (var statusCode in statusCodes)
        {
            sb.AppendLine();
            sb.AppendLine(
                $"    public static Aff<A> MapFailTo{statusCode}<A>(");
            sb.AppendLine(
                "        this Aff<A> ma,");
            sb.AppendLine(
                "        Option<string> errorCode = default,");
            sb.AppendLine(
                "        Option<string> message = default,");
            sb.AppendLine(
                "        Option<object> data = default,");
            sb.AppendLine(
                "        bool @override = true)");
            sb.AppendLine(
                "        => ma.MapFailToHttpResultError(");
            sb.AppendLine(
                $"            HttpStatusCode.{statusCode}, errorCode, message, data, @override);");
            sb.AppendLine();
            sb.AppendLine(
                $"    public static Aff<A> MapFailTo{statusCode}<A>(");
            sb.AppendLine(
                "        this Aff<A> ma,");
            sb.AppendLine(
                "        Func<Error, string> messageFunc,");
            sb.AppendLine(
                "        Option<string> errorCode = default,");
            sb.AppendLine(
                "        Option<object> data = default,");
            sb.AppendLine(
                "        bool @override = true)");
            sb.AppendLine(
                "        => ma.MapFailToHttpResultError(");
            sb.AppendLine(
                $"            HttpStatusCode.{statusCode}, messageFunc, errorCode, data, @override);");
        }

        // Guard
        sb.AppendLine();

        sb.AppendLine(
            "    public static Aff<A> GuardWithHttpStatus<A>(");
        sb.AppendLine(
            "        this Aff<A> ma,");
        sb.AppendLine(
            "        Func<A, bool> predicate,");
        sb.AppendLine(
            "        HttpStatusCode httpStatusCode,");
        sb.AppendLine(
            "        string message = \"\")");
        sb.AppendLine(
            "        => ma.Guard(predicate, HttpResultError.New(httpStatusCode, message));");

        foreach (var statusCode in statusCodes)
        {
            sb.AppendLine();
            sb.AppendLine(
                $"    public static Aff<A> GuardWith{statusCode}<A>(");
            sb.AppendLine(
                "        this Aff<A> ma, Func<A, bool> predicate, string message = \"\")");
            sb.AppendLine(
                $"            => ma.GuardWithHttpStatus(predicate, HttpStatusCode.{statusCode}, message);");
        }

        // Aff<Option<A>>
        sb.AppendLine();

        foreach (var statusCode in statusCodes)
        {
            sb.AppendLine();
            sb.AppendLine(
                $"    public static Aff<A> MapNoneTo{statusCode}<A>(this Aff<Option<A>> ma, string message = \"\")");
            sb.AppendLine(
                $"        => ma.Bind(opt => opt.ToAffWithFailTo{statusCode}(message));");
        }

        // EOF
        sb.AppendLine("}");

        return sb.ToString();
    }
}